#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef ANDESUI_SWIFT_H
#define ANDESUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AndesUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// Used to define the kind or border of an AndesBadge
typedef SWIFT_ENUM(NSInteger, AndesBadgeBorder, open) {
  AndesBadgeBorderStandard = 0,
  AndesBadgeBorderCorner = 1,
  AndesBadgeBorderRounded = 2,
};

enum AndesBadgeType : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC7AndesUI13AndesBadgeDot")
@interface AndesBadgeDot : UIView
/// Defines the colors/icon of the Badge Dot
@property (nonatomic) enum AndesBadgeType type;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AndesBadgeType)type OBJC_DESIGNATED_INITIALIZER;
@end

/// Used to define the style of an AndesBadge
typedef SWIFT_ENUM(NSInteger, AndesBadgeHierarchy, open) {
  AndesBadgeHierarchyLoud = 0,
  AndesBadgeHierarchyQuiet = 1,
};

enum AndesBadgeSize : NSInteger;

SWIFT_CLASS("_TtC7AndesUI14AndesBadgePill")
@interface AndesBadgePill : UIView
/// Defines the hierarchy of an AndesBadge
@property (nonatomic) enum AndesBadgeHierarchy hierarchy;
/// Defines the colors/icon of the Badge
@property (nonatomic) enum AndesBadgeType type;
/// Defines the border style (Pill only)
@property (nonatomic) enum AndesBadgeBorder border;
/// Defines the size of the AndesBadge
@property (nonatomic) enum AndesBadgeSize size;
/// Defines the current text (Pill only)
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHierarchy:(enum AndesBadgeHierarchy)hierarchy type:(enum AndesBadgeType)type border:(enum AndesBadgeBorder)border size:(enum AndesBadgeSize)size text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
@end


@interface AndesBadgePill (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibBorder SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'border' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibSize SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'size' instead.");
@end

/// The AndesBadgeSize contains the differents sizes that a badge supports
typedef SWIFT_ENUM(NSInteger, AndesBadgeSize, open) {
  AndesBadgeSizeSmall = 0,
  AndesBadgeSizeLarge = 1,
};

/// Used to define the colors of an AndesBadge
typedef SWIFT_ENUM(NSInteger, AndesBadgeType, open) {
  AndesBadgeTypeNeutral = 0,
  AndesBadgeTypeHighlight = 1,
  AndesBadgeTypeSuccess = 2,
  AndesBadgeTypeWarning = 3,
  AndesBadgeTypeError = 4,
};


SWIFT_CLASS("_TtC7AndesUI24AndesBottomSheetTitleBar")
@interface AndesBottomSheetTitleBar : UIView
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic) NSTextAlignment textAlignment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIEvent;

SWIFT_CLASS("_TtC7AndesUI32AndesBottomSheetTitleBarGradient")
@interface AndesBottomSheetTitleBarGradient : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)_;
- (BOOL)pointInside:(CGPoint)_ withEvent:(UIEvent * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol AndesBottomSheetViewControllerDelegate;
@protocol UIContentContainer;
@class NSBundle;

SWIFT_CLASS("_TtC7AndesUI30AndesBottomSheetViewController")
@interface AndesBottomSheetViewController : UIViewController
@property (nonatomic, readonly, strong) UIViewController * _Nonnull rootViewController;
@property (nonatomic, weak) id <AndesBottomSheetViewControllerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) AndesBottomSheetTitleBar * _Nonnull titleBar;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id <UIContentContainer> _Nonnull)container;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



SWIFT_PROTOCOL("_TtP7AndesUI38AndesBottomSheetViewControllerDelegate_")
@protocol AndesBottomSheetViewControllerDelegate
- (void)sheetViewController:(AndesBottomSheetViewController * _Nonnull)sheetViewController heightDidChange:(CGFloat)height;
@end

enum AndesButtonHierarchy : NSInteger;
enum AndesButtonSize : NSInteger;
@class AndesButtonIcon;

/// User interface element the user can tap or click to perform an action.
/// Has all the same features as an [UIButton] but reinforces the Andes style.
/// Is compatible to use via code or via Interface Builder.
/// The AndesButton has several custom atributes that allows you to specified the button look and feel.
/// For style:
/// <ul>
///   <li>
///     Loud
///   </li>
///   <li>
///     Quiet
///   </li>
///   <li>
///     Transparent
///   </li>
/// </ul>
/// For size:
/// <ul>
///   <li>
///     Large (this is the only size that supports an icon)
///   </li>
///   <li>
///     Medium
///   </li>
///   <li>
///     Small
///   </li>
/// </ul>
/// The responsibility of the AndesButton is to know how it should be represent based on the attributes provided
SWIFT_CLASS("_TtC7AndesUI11AndesButton")
@interface AndesButton : UIControl
/// returns the current selected hierarchy
@property (nonatomic) enum AndesButtonHierarchy hierarchy;
/// returns the current selected size
@property (nonatomic) enum AndesButtonSize size;
/// returns the current text
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
/// returns the current selected hierarchy
@property (nonatomic, readonly, strong) AndesButtonIcon * _Nullable icon;
@property (nonatomic, getter=isEnabled) IBInspectable BOOL enabled;
/// Constructor for button when it is used programmatically where
/// \param text  is text that the button will contain 
///
/// \param style is the type of button you want to draw 
///
/// \param size is the especification for the button dimensions 
///
/// \param icon (optional) allows to inyect an icon, only if the size specified is .large 
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text hierarchy:(enum AndesButtonHierarchy)hierarchy size:(enum AndesButtonSize)size icon:(AndesButtonIcon * _Nullable)icon OBJC_DESIGNATED_INITIALIZER;
/// Constructor for the button when it is used by interface builder
/// By defect, it will be .loud and .large
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Sets up the icon size to .large with the specified icon
/// \param icon the icon with its respective orientation 
///
- (void)setLargeSizeWithIcon:(AndesButtonIcon * _Nonnull)icon;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AndesButton (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibSize SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'size' instead.");
@end

/// The AndesButtonSize contains the differents styles that a button supports
typedef SWIFT_ENUM(NSInteger, AndesButtonHierarchy, open) {
  AndesButtonHierarchyLoud = 0,
  AndesButtonHierarchyQuiet = 1,
  AndesButtonHierarchyTransparent = 2,
};

@class UIImage;
enum AndesButtonOrientation : NSInteger;

/// Object model that contains the Button Icon representation
SWIFT_CLASS("_TtC7AndesUI15AndesButtonIcon")
@interface AndesButtonIcon : NSObject
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
@property (nonatomic, readonly) enum AndesButtonOrientation orientation;
- (nonnull instancetype)initWithIcon:(UIImage * _Nonnull)icon orientation:(enum AndesButtonOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the orientation of the icon in the Button, the icon can be at the right or left
typedef SWIFT_ENUM(NSInteger, AndesButtonOrientation, open) {
  AndesButtonOrientationLeft = 0,
  AndesButtonOrientationRight = 1,
};

/// The AndesButtonSize contains the differents sizes that a button supports
typedef SWIFT_ENUM(NSInteger, AndesButtonSize, open) {
  AndesButtonSizeLarge = 0,
  AndesButtonSizeMedium = 1,
  AndesButtonSizeSmall = 2,
};

enum AndesCardPadding : NSInteger;
enum AndesCardHierarchy : NSInteger;
enum AndesCardStyle : NSInteger;
enum AndesCardType : NSInteger;

SWIFT_CLASS("_TtC7AndesUI9AndesCard")
@interface AndesCard : UIView
/// Sets the title of the AndesCard
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
/// Sets the padding of the AndesCard
@property (nonatomic) enum AndesCardPadding padding;
/// Sets the hierarchy of the AndesCard
@property (nonatomic) enum AndesCardHierarchy hierarchy;
/// Sets the style of the AndesCard
@property (nonatomic) enum AndesCardStyle style;
/// Sets the type of AndesCard
@property (nonatomic) enum AndesCardType type;
@property (nonatomic, readonly, copy) NSString * _Nullable actionLinkTitle;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCardView:(UIView * _Nonnull)cardView title:(NSString * _Nullable)title padding:(enum AndesCardPadding)padding hierarchy:(enum AndesCardHierarchy)hierarchy style:(enum AndesCardStyle)style type:(enum AndesCardType)type OBJC_DESIGNATED_INITIALIZER;
/// Link action, when defined a link button will appear
/// \param title Link text
///
/// \param handler handler to trigger on link tap
///
- (void)setLinkAction:(NSString * _Nonnull)title handler:(void (^ _Nonnull)(AndesCard * _Nonnull))handler;
/// Remove link action if present
- (void)removeLinkAction;
/// Card action, transforms the card into a button
/// \param handler handler to trigger on link tap
///
- (void)setCardActionWithHandler:(void (^ _Nonnull)(AndesCard * _Nonnull))handler;
/// Remove card action if present
- (void)removeCardAction;
@end



@interface AndesCard (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibPadding SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'padding' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'style' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@end

/// Used to define the hierarchy of an AndesCard
typedef SWIFT_ENUM(NSInteger, AndesCardHierarchy, open) {
  AndesCardHierarchyPrimary = 0,
  AndesCardHierarchySecondary = 1,
  AndesCardHierarchySecondaryDark = 2,
};

/// Used to define the padding of an AndesCard
typedef SWIFT_ENUM(NSInteger, AndesCardPadding, open) {
  AndesCardPaddingNone = 0,
  AndesCardPaddingSmall = 1,
  AndesCardPaddingMedium = 2,
  AndesCardPaddingLarge = 3,
  AndesCardPaddingXlarge = 4,
};

/// Used to define the style of an AndesCard
typedef SWIFT_ENUM(NSInteger, AndesCardStyle, open) {
  AndesCardStyleElevated = 0,
  AndesCardStyleOutline = 1,
};

/// Used to define the type of an AndesCard
typedef SWIFT_ENUM(NSInteger, AndesCardType, open) {
  AndesCardTypeNone = 0,
  AndesCardTypeHighlight = 1,
  AndesCardTypeError = 2,
  AndesCardTypeSuccess = 3,
  AndesCardTypeWarning = 4,
};

typedef SWIFT_ENUM(NSInteger, AndesCellType, open) {
  AndesCellTypeSimple = 0,
  AndesCellTypeChevron = 1,
  AndesCellTypeRadioButton = 2,
  AndesCellTypeCheckBox = 3,
};

enum AndesCheckboxType : NSInteger;
enum AndesCheckboxAlign : NSInteger;
enum AndesCheckboxStatus : NSInteger;

SWIFT_CLASS("_TtC7AndesUI13AndesCheckbox")
@interface AndesCheckbox : UIView
/// Sets the title of the AndesCheckbox
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
/// Sets the type of the AndesCaheckbox , default idle
@property (nonatomic) enum AndesCheckboxType type;
/// Sets the slign of the AndesCaheckbox , default left
@property (nonatomic) enum AndesCheckboxAlign align;
/// Sets the status of the AndesCaheckbox , default unselected
@property (nonatomic) enum AndesCheckboxStatus status;
/// Set dismiss callback to be invoked when checkbox button is pressed
- (void)setCheckboxDidTappedWithCallback:(void (^ _Nonnull)(AndesCheckbox * _Nonnull))callback;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AndesCheckboxType)type align:(enum AndesCheckboxAlign)align status:(enum AndesCheckboxStatus)status title:(NSString * _Nonnull)title OBJC_DESIGNATED_INITIALIZER;
@end



@interface AndesCheckbox (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibStatus SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'status' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibAlign SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'align' instead.");
@end

/// Used to set the checkbox align
typedef SWIFT_ENUM(NSInteger, AndesCheckboxAlign, open) {
  AndesCheckboxAlignLeft = 0,
  AndesCheckboxAlignRight = 1,
};

/// Used to set the checkbox status
typedef SWIFT_ENUM(NSInteger, AndesCheckboxStatus, open) {
  AndesCheckboxStatusSelected = 0,
  AndesCheckboxStatusUnselected = 1,
  AndesCheckboxStatusUndefined = 2,
};

/// Used to set the checkbox type
typedef SWIFT_ENUM(NSInteger, AndesCheckboxType, open) {
  AndesCheckboxTypeIdle = 0,
  AndesCheckboxTypeDisabled = 1,
  AndesCheckboxTypeError = 2,
};


/// This class is a custom cell to AndesUI
/// requires:
/// See the AndesSimpleCell and AndesChevronCell documentation for integration
/// important:
/// This class cannot be initialize
SWIFT_CLASS("_TtC7AndesUI13AndesListCell")
@interface AndesListCell : UITableViewCell
@property (nonatomic, readonly) enum AndesCellType type;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
@end

@class AndesThumbnail;

/// This class is a custom cell to AndesUI, this cell has a basic configuration and a chevron to the right
SWIFT_CLASS("_TtC7AndesUI16AndesChevronCell")
@interface AndesChevronCell : AndesListCell
/// This method initialize an AndesChevronCell to draw the row just objc
/// authors:
/// @Jona
/// version:
/// Available since 3.13.0
/// \param title Set the title for the cell
///
/// \param subtitle Set the subtitle for the cell
///
/// \param thumbnail Set a thumbnail to the left of the cell
///
/// \param numberOfLines Set the number of lines to the cell title, the default is 0
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle thumbnail:(AndesThumbnail * _Nullable)thumbnail numberOfLines:(NSInteger)numberOfLines OBJC_DESIGNATED_INITIALIZER;
@end

@class AndesCoachMarkStepEntity;
@class UIScrollView;

SWIFT_CLASS("_TtC7AndesUI20AndesCoachMarkEntity")
@interface AndesCoachMarkEntity : NSObject
- (nonnull instancetype)initWithSteps:(NSArray<AndesCoachMarkStepEntity *> * _Nonnull)steps scrollView:(UIScrollView * _Nullable)scrollView completionHandler:(void (^ _Nullable)(void))completionHandler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HighlightStyle : NSInteger;

SWIFT_CLASS("_TtC7AndesUI24AndesCoachMarkStepEntity")
@interface AndesCoachMarkStepEntity : NSObject
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title description:(NSString * _Nonnull)description view:(UIView * _Nonnull)view style:(enum HighlightStyle)style nextText:(NSString * _Nonnull)nextText OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HighlightStyle, open) {
  HighlightStyleRectangle = 0,
  HighlightStyleCircle = 1,
};

@protocol AndesCoachMarkViewDelegate;
@class UIColor;

SWIFT_CLASS("_TtC7AndesUI18AndesCoachMarkView")
@interface AndesCoachMarkView : UIView
@property (nonatomic, weak) id <AndesCoachMarkViewDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) UIColor * _Nonnull overlayColor;
- (nonnull instancetype)initWithModel:(AndesCoachMarkEntity * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end





SWIFT_PROTOCOL("_TtP7AndesUI26AndesCoachMarkViewDelegate_")
@protocol AndesCoachMarkViewDelegate
- (void)onShowNextWithStepIndex:(NSInteger)stepIndex;
- (void)onCloseWithStepIndex:(NSInteger)stepIndex;
@end


/// AndesColors is used to create a new StyleSheet
/// implementing all the necessary colors
SWIFT_PROTOCOL("_TtP7AndesUI11AndesColors_")
@protocol AndesColors
/// The default colors that you need to override
/// to use your color palette through all the UI components
@property (nonatomic, readonly, strong) UIColor * _Nonnull bgColorPrimary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull bgColorSecondary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull bgColorWhite;
@property (nonatomic, readonly, strong) UIColor * _Nonnull brandColor500;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor100;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor150;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor200;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor300;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor400;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor500;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor600;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor700;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor800;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorPrimary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorSecondary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorDisabled;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorNegative;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorCaution;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorPositive;
@property (nonatomic, readonly, strong) UIColor * _Nonnull tetColorLink;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorWhite;
@property (nonatomic, readonly, strong) UIColor * _Nonnull feedbackColorNegative;
@property (nonatomic, readonly, strong) UIColor * _Nonnull feedbackColorCaution;
@property (nonatomic, readonly, strong) UIColor * _Nonnull feedbackColorPositive;
@end


SWIFT_CLASS("_TtC7AndesUI15AndesDatePicker")
@interface AndesDatePicker : UIControl
/// Date Picker: is a component of quick choice of dates
/// \param maxDate maximum date allowed to select a date (date after that it will not be allowed to select)
///
/// \param callback will return the selected date and if the confirmation button was pressed
///
- (void)setDatePickerDateWithMaxDate:(NSDate * _Nullable)maxDate callback:(void (^ _Nonnull)(NSDate * _Nullable, BOOL))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC7AndesUI13AndesFontSize")
@interface AndesFontSize : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleXL;)
+ (CGFloat)titleXL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleL;)
+ (CGFloat)titleL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleM;)
+ (CGFloat)titleM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleS;)
+ (CGFloat)titleS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleXS;)
+ (CGFloat)titleXS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat bodyL;)
+ (CGFloat)bodyL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat bodyM;)
+ (CGFloat)bodyM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat bodyS;)
+ (CGFloat)bodyS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat bodyXS;)
+ (CGFloat)bodyXS SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIFont;

SWIFT_CLASS("_TtC7AndesUI14AndesFontStyle")
@interface AndesFontStyle : NSObject
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColor;
@property (nonatomic, readonly, strong) UIFont * _Nonnull font;
@property (nonatomic, readonly) CGFloat lineSpacing;
@property (nonatomic, readonly) CGFloat lineHeight SWIFT_DEPRECATED_MSG("", "lineSpacing");
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font lineHeight:(CGFloat)lineHeight OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Please use init with init(textColor:font:lineSpacing:)' instead");
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font lineSpacing:(CGFloat)lineSpacing OBJC_DESIGNATED_INITIALIZER;
/// Init an AndesFontStyle with a sketch line height
/// \param textColor Font Color
///
/// \param font font (with sketch size)
///
/// \param sketchLineHeight line height
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font sketchLineHeight:(CGFloat)sketchLineHeight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AndesFonts is used to create a new StyleSheet
/// implementing all the necessary fonts
SWIFT_PROTOCOL("_TtP7AndesUI10AndesFonts_")
@protocol AndesFonts
/// The default font variations that you need to override
/// to use your own font through all the UI components.
/// By default these return the SF system font
- (AndesFontStyle * _Nonnull)titleXLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleMWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleXSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyMWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodySWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyXSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)regularSystemFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)lightSystemFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)mediumSystemFontOfSizeWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)semiboldSystemFontOfSizeWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;

SWIFT_CLASS("_TtC7AndesUI18AndesIconsProvider")
@interface AndesIconsProvider : NSObject
/// Loads an Andes icon
/// \param name icon name
///
/// \param success called icon if found
///
+ (void)loadIconWithName:(NSString * _Nonnull)name success:(SWIFT_NOESCAPE void (^ _Nonnull)(UIImage * _Nonnull))success;
/// Loads an Andes icon
/// \param name icon name
///
/// \param success called if icon found
///
/// \param failure called if icon not found
///
+ (void)loadIconWithName:(NSString * _Nonnull)name success:(SWIFT_NOESCAPE void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Loads an Andes icon and inserts into a UIImageView
/// \param name icon name
///
/// \param placeItInto image view to place icon into
///
+ (void)loadIconWithName:(NSString * _Nonnull)name placeItInto:(UIImageView * _Nonnull)placeItInto;
/// Loads an Andes icon and inserts into a UIImageView
/// \param name icon name
///
/// \param placeItInto image view to place icon into
///
/// \param failure called if icon not found
///
+ (void)loadIconWithName:(NSString * _Nonnull)name placeItInto:(UIImageView * _Nonnull)placeItInto failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7AndesUI18AndesIconsStrategy_")
@protocol AndesIconsStrategy
/// Provides an icon retrieved from Images.xcassets, if not found, calls failure with nil
/// \param name icon name
///
/// \param success called if icon found
///
/// \param failure called if icon not found or error occured
///
- (void)loadIconWithName:(NSString * _Nonnull)name success:(SWIFT_NOESCAPE void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nullable))failure;
@end

@protocol AndesListDelegate;
@protocol AndesListDataSource;
enum AndesSeparatorStyle : NSInteger;
enum AndesSelectionStyle : NSInteger;
enum AndesListSize : NSInteger;

/// This class is a custom UITableView to AndesUI
SWIFT_CLASS("_TtC7AndesUI9AndesList")
@interface AndesList : UIView
/// Set the delegate to use own methods
@property (nonatomic, weak) id <AndesListDelegate> _Nullable delegate;
/// Set the dataSource to use own methods
@property (nonatomic, weak) id <AndesListDataSource> _Nullable dataSource;
/// Set the separator style, default value .none
@property (nonatomic) enum AndesSeparatorStyle separatorStyle;
/// Set the selection style, default value .default
@property (nonatomic) enum AndesSelectionStyle selectionStyle;
/// Set the list type, default value simple
@property (nonatomic) enum AndesCellType listType;
/// Set the list size, default value medium
@property (nonatomic) enum AndesListSize size;
/// This method reload the data
- (void)reloadData;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AndesList (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'listType' instead.");
@end




SWIFT_PROTOCOL("_TtP7AndesUI19AndesListDataSource_")
@protocol AndesListDataSource
- (AndesListCell * _Nonnull)andesList:(AndesList * _Nonnull)listView cellForRowAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)andesList:(AndesList * _Nonnull)listView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSections:(AndesList * _Nonnull)listView SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol of AndesList behaviour
SWIFT_PROTOCOL("_TtP7AndesUI17AndesListDelegate_")
@protocol AndesListDelegate
@optional
- (void)andesList:(AndesList * _Nonnull)listView didSelectRowAt:(NSIndexPath * _Nonnull)indexPath;
@end

typedef SWIFT_ENUM(NSInteger, AndesListSize, open) {
  AndesListSizeSmall = 0,
  AndesListSizeMedium = 1,
  AndesListSizeLarge = 2,
};

enum AndesMessageHierarchy : NSInteger;
enum AndesMessageType : NSInteger;

SWIFT_CLASS("_TtC7AndesUI12AndesMessage")
@interface AndesMessage : UIView
/// Sets the hierarchy of the AndesMessage
@property (nonatomic) enum AndesMessageHierarchy hierarchy;
/// Sets the type of the AndesMessage
@property (nonatomic) enum AndesMessageType type;
/// Sets the title of the AndesMessage
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
/// Sets the body of the AndesMessage
@property (nonatomic, copy) IBInspectable NSString * _Nonnull body;
/// isDismissable shows a dismiss button, when pressed the message set isHidden = true
@property (nonatomic) IBInspectable BOOL isDismissable;
/// if set, a primary button will be shown
@property (nonatomic, copy) IBInspectable NSString * _Nullable primaryActionText;
/// if set, a secondary button will be shown, requieres primary to be set
@property (nonatomic, copy) IBInspectable NSString * _Nullable secondaryActionText;
@property (nonatomic, copy) IBInspectable NSString * _Nullable linkActionText;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHierarchy:(enum AndesMessageHierarchy)hierarchy type:(enum AndesMessageType)type title:(NSString * _Nonnull)title body:(NSString * _Nonnull)body OBJC_DESIGNATED_INITIALIZER;
/// handler to trigger when the user dismisses the message
/// \param handler dismiss handler
///
- (void)onDismiss:(void (^ _Nullable)(AndesMessage * _Nonnull))callback;
/// Primary action, when defined with a title a button will show on the message
/// \param title Button text
///
/// \param handler handler to trigger when button pressed
///
- (void)setPrimaryAction:(NSString * _Nonnull)title handler:(void (^ _Nullable)(AndesMessage * _Nonnull))handler;
/// Actions that shows oly if primary action defined.
/// \param title Button text
///
/// \param handler handler to trigger when button pressed
///
- (void)setSecondaryAction:(NSString * _Nonnull)title handler:(void (^ _Nullable)(AndesMessage * _Nonnull))handler;
/// Link action, when defined with a title a button will show on the message
/// \param title Link text
///
/// \param handler handler to trigger when link is pressed
///
- (void)setLinkAction:(NSString * _Nonnull)title handler:(void (^ _Nullable)(AndesMessage * _Nonnull))handler;
@end



@interface AndesMessage (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@end

/// Used to define the style of an AndesMessage
typedef SWIFT_ENUM(NSInteger, AndesMessageHierarchy, open) {
  AndesMessageHierarchyLoud = 0,
  AndesMessageHierarchyQuiet = 1,
};

/// Used to define the colors of an AndesMessage
typedef SWIFT_ENUM(NSInteger, AndesMessageType, open) {
  AndesMessageTypeNeutral = 0,
  AndesMessageTypeSuccess = 1,
  AndesMessageTypeWarning = 2,
  AndesMessageTypeError = 3,
};

enum AndesRadioButtonType : NSInteger;
enum AndesRadioButtonAlign : NSInteger;
enum AndesRadioButtonStatus : NSInteger;

SWIFT_CLASS("_TtC7AndesUI16AndesRadioButton")
@interface AndesRadioButton : UIView
/// Sets the title of the RadioButton
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
/// Sets the type of the RadioButton , default idle
@property (nonatomic) enum AndesRadioButtonType type;
/// Sets the slign of the RadioButton , default left
@property (nonatomic) enum AndesRadioButtonAlign align;
/// Sets the status of the RadioButton , default unselected
@property (nonatomic) enum AndesRadioButtonStatus status;
/// Set dismiss callback to be invoked when checkbox button is pressed
- (void)setRadioButtonTappedWithCallback:(void (^ _Nonnull)(AndesRadioButton * _Nonnull))callback;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AndesRadioButtonType)type align:(enum AndesRadioButtonAlign)align status:(enum AndesRadioButtonStatus)status title:(NSString * _Nonnull)title OBJC_DESIGNATED_INITIALIZER;
@end



@interface AndesRadioButton (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibStatus SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'status' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibAlign SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'align' instead.");
@end

typedef SWIFT_ENUM(NSInteger, AndesRadioButtonAlign, open) {
  AndesRadioButtonAlignLeft = 0,
  AndesRadioButtonAlignRight = 1,
};

typedef SWIFT_ENUM(NSInteger, AndesRadioButtonStatus, open) {
  AndesRadioButtonStatusSelected = 0,
  AndesRadioButtonStatusUnselected = 1,
};

/// Used to set the radiobutton type
typedef SWIFT_ENUM(NSInteger, AndesRadioButtonType, open) {
  AndesRadioButtonTypeIdle = 0,
  AndesRadioButtonTypeDisabled = 1,
  AndesRadioButtonTypeError = 2,
};

typedef SWIFT_ENUM(NSInteger, AndesSelectionStyle, open) {
  AndesSelectionStyleGray = 0,
  AndesSelectionStyleBlue = 1,
  AndesSelectionStyleNone = 2,
  AndesSelectionStyleDefaultStyle = 3,
};

typedef SWIFT_ENUM(NSInteger, AndesSeparatorStyle, open) {
  AndesSeparatorStyleNone = 0,
  AndesSeparatorStyleSingleLine = 1,
};


/// This class is a custom cell to AndesUI, this cell has a basic configuration
SWIFT_CLASS("_TtC7AndesUI15AndesSimpleCell")
@interface AndesSimpleCell : AndesListCell
/// This method initialize an AndesSimpleCell to draw the row just objc
/// authors:
/// @Jona
/// version:
/// Available since 3.13.0
/// \param title Set the title for the cell
///
/// \param subtitle Set the subtitle for the cell
///
/// \param thumbnail Set a thumbnail to the left of the cell
///
/// \param numberOfLines Set the number of lines to the cell title, the default is 0
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle thumbnail:(AndesThumbnail * _Nullable)thumbnail numberOfLines:(NSInteger)numberOfLines OBJC_DESIGNATED_INITIALIZER;
@end

enum AndesSnackbarDuration : NSInteger;
enum AndesSnackbarType : NSInteger;
@class AndesSnackbarAction;

/// It is a short message that can be displayed for a defined time or require user action.
/// It always appears at the bottom of the screen above any content. Snackbars disappear automatically.
SWIFT_CLASS("_TtC7AndesUI13AndesSnackbar")
@interface AndesSnackbar : UIView
/// Text shown in Snackbar
@property (nonatomic, copy) NSString * _Nonnull text;
/// Snackbars disappear automatically after this value in seconds.
/// By default the duration is <code>normal</code> (6 seconds)
@property (nonatomic) enum AndesSnackbarDuration duration;
/// Snackbar can be shown for different types of feedback.
/// To enforce the kind of feedback we use different colors.
@property (nonatomic) enum AndesSnackbarType type;
/// Snackbar can show an action button, use this property to set the title and callback for that action
@property (nonatomic, strong) AndesSnackbarAction * _Nullable action;
/// Show the <code>Snackbar</code> at the top visible view controller
/// If you are showing the snackbar as a result of an async operation consider use <code>show(at viewController:)</code>
/// to ensure that  the <code>Snackbar</code> is shown in the right view controller.
/// If another <code>Snackbars</code> are being shown, this is going to be shown when the last one is dismissed.
- (void)show;
/// Show the Snackbar in the view controller received
- (void)showAt:(UIViewController * _Nonnull)viewController;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text duration:(enum AndesSnackbarDuration)duration type:(enum AndesSnackbarType)type OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7AndesUI19AndesSnackbarAction")
@interface AndesSnackbarAction : NSObject
/// Initialize the Snackbar action with the text shown in the button and the action to call when tapped
/// \param text Text shown in the snackbar action
///
/// \param callback Callback called when snackbar button is pressed. The snackbar is going to be dismissed when this callback is invoked.
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text callback:(void (^ _Nullable)(void))callback OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the duration for Snackbar to be shown
typedef SWIFT_ENUM(NSInteger, AndesSnackbarDuration, open) {
/// For short text size, shows Snackbar for 3 seconds
  AndesSnackbarDurationShort = 3,
/// For medium text size, shows Snackbar for 6 seconds
  AndesSnackbarDurationNormal = 6,
/// For long texts, shows Snackbar for 10 seconds
  AndesSnackbarDurationLong = 10,
};

/// Tags allow you to filter content using color-based categories. A color is defined for each type.
typedef SWIFT_ENUM(NSInteger, AndesSnackbarType, open) {
  AndesSnackbarTypeNeutral = 0,
  AndesSnackbarTypeSuccess = 1,
  AndesSnackbarTypeError = 2,
};


SWIFT_PROTOCOL("_TtP7AndesUI15AndesStyleSheet_")
@protocol AndesStyleSheet <AndesColors, AndesFonts>
@end


SWIFT_CLASS("_TtC7AndesUI22AndesStyleSheetDefault")
@interface AndesStyleSheetDefault : NSObject <AndesStyleSheet>
@property (nonatomic, strong) UIColor * _Nonnull bgColorPrimary;
@property (nonatomic, strong) UIColor * _Nonnull bgColorSecondary;
@property (nonatomic, strong) UIColor * _Nonnull bgColorWhite;
@property (nonatomic, strong) UIColor * _Nonnull brandColor500;
@property (nonatomic, strong) UIColor * _Nonnull accentColor;
@property (nonatomic, strong) UIColor * _Nonnull accentColor100;
@property (nonatomic, strong) UIColor * _Nonnull accentColor150;
@property (nonatomic, strong) UIColor * _Nonnull accentColor200;
@property (nonatomic, strong) UIColor * _Nonnull accentColor300;
@property (nonatomic, strong) UIColor * _Nonnull accentColor400;
@property (nonatomic, strong) UIColor * _Nonnull accentColor500;
@property (nonatomic, strong) UIColor * _Nonnull accentColor600;
@property (nonatomic, strong) UIColor * _Nonnull accentColor700;
@property (nonatomic, strong) UIColor * _Nonnull accentColor800;
@property (nonatomic, strong) UIColor * _Nonnull textColorPrimary;
@property (nonatomic, strong) UIColor * _Nonnull textColorSecondary;
@property (nonatomic, strong) UIColor * _Nonnull textColorDisabled;
@property (nonatomic, strong) UIColor * _Nonnull textColorNegative;
@property (nonatomic, strong) UIColor * _Nonnull textColorCaution;
@property (nonatomic, strong) UIColor * _Nonnull textColorPositive;
@property (nonatomic, strong) UIColor * _Nonnull tetColorLink;
@property (nonatomic, strong) UIColor * _Nonnull textColorWhite;
@property (nonatomic, strong) UIColor * _Nonnull feedbackColorCaution;
@property (nonatomic, strong) UIColor * _Nonnull feedbackColorPositive;
@property (nonatomic, strong) UIColor * _Nonnull feedbackColorNegative;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (AndesFontStyle * _Nonnull)titleXLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleMWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleXSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyMWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodySWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyXSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)regularSystemFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)lightSystemFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)mediumSystemFontOfSizeWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)semiboldSystemFontOfSizeWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7AndesUI22AndesStyleSheetManager")
@interface AndesStyleSheetManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <AndesStyleSheet> _Nonnull styleSheet;)
+ (id <AndesStyleSheet> _Nonnull)styleSheet SWIFT_WARN_UNUSED_RESULT;
+ (void)setStyleSheet:(id <AndesStyleSheet> _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum AndesTagSize : NSInteger;
enum AndesTagState : NSInteger;
enum AndesTagChoiceType : NSInteger;
@protocol AndesTagLeftContent;

SWIFT_CLASS("_TtC7AndesUI14AndesTagChoice")
@interface AndesTagChoice : UIView
/// Text shown by the Simple Tag
@property (nonatomic, copy) NSString * _Nullable text;
/// Size for the Simple Tag
@property (nonatomic) enum AndesTagSize size;
/// State indicates different color styles for different semantic pruposes
@property (nonatomic) enum AndesTagState state;
/// Type indicates different tags type for different semantic pruposes
@property (nonatomic) enum AndesTagChoiceType type;
/// Set the Simple Tag left content. Available only for large size.
@property (nonatomic, strong) id <AndesTagLeftContent> _Nullable leftContent;
/// Set if the view has to animate when tag was selected. Default value <code>true</code>
@property (nonatomic) BOOL shouldAnimateTag;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text size:(enum AndesTagSize)size type:(enum AndesTagChoiceType)type state:(enum AndesTagState)state OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text size:(enum AndesTagSize)size type:(enum AndesTagChoiceType)type state:(enum AndesTagState)state leftContent:(id <AndesTagLeftContent> _Nullable)leftContent OBJC_DESIGNATED_INITIALIZER;
/// Set callback to be invoked when tag is pressed
- (void)shouldSelectTagWithCallback:(BOOL (^ _Nonnull)(void))callback;
@end


typedef SWIFT_ENUM(NSInteger, AndesTagChoiceType, open) {
  AndesTagChoiceTypeSimple = 0,
  AndesTagChoiceTypeDropdown = 1,
};


SWIFT_PROTOCOL("_TtP7AndesUI19AndesTagLeftContent_")
@protocol AndesTagLeftContent
@end


SWIFT_CLASS("_TtC7AndesUI22AndesTagLeftContentDot")
@interface AndesTagLeftContentDot : NSObject <AndesTagLeftContent>
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor text:(NSString * _Nonnull)text textColor:(UIColor * _Nonnull)textColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AndesUI23AndesTagLeftContentIcon")
@interface AndesTagLeftContentIcon : NSObject <AndesTagLeftContent>
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor icon:(UIImage * _Nonnull)icon iconColor:(UIColor * _Nonnull)iconColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor andesIconName:(NSString * _Nonnull)andesIconName iconColor:(UIColor * _Nonnull)iconColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AndesUI24AndesTagLeftContentImage")
@interface AndesTagLeftContentImage : NSObject <AndesTagLeftContent>
- (nonnull instancetype)initWithAvatar:(UIImage * _Nonnull)avatar OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum AndesTagType : NSInteger;

SWIFT_CLASS("_TtC7AndesUI14AndesTagSimple")
@interface AndesTagSimple : UIView
/// Text shown by the Simple Tag
@property (nonatomic, copy) NSString * _Nullable text;
/// Size for the Simple Tag
@property (nonatomic) enum AndesTagSize size;
/// Type indicates different color styles for different semantic pruposes
@property (nonatomic) enum AndesTagType type;
/// Set the Simple Tag left content. Available only for large size.
@property (nonatomic, strong) id <AndesTagLeftContent> _Nullable leftContent;
/// If the tag is dismissible, a close button is shown in the right side
@property (nonatomic) BOOL isDismissible;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text size:(enum AndesTagSize)size type:(enum AndesTagType)type isDismissible:(BOOL)isDismissible OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text size:(enum AndesTagSize)size type:(enum AndesTagType)type isDismissible:(BOOL)isDismissible leftContent:(id <AndesTagLeftContent> _Nullable)leftContent OBJC_DESIGNATED_INITIALIZER;
/// Set dismiss callback to be invoked when dismiss button is pressed
- (void)setDidDismissWithCallback:(void (^ _Nonnull)(AndesTagSimple * _Nonnull))callback;
@end


typedef SWIFT_ENUM(NSInteger, AndesTagSize, open) {
  AndesTagSizeSmall = 0,
  AndesTagSizeLarge = 1,
};

typedef SWIFT_ENUM(NSInteger, AndesTagState, open) {
  AndesTagStateIdle = 0,
  AndesTagStateSelected = 1,
};

typedef SWIFT_ENUM(NSInteger, AndesTagType, open) {
  AndesTagTypeNeutral = 0,
  AndesTagTypeHighlight = 1,
  AndesTagTypeSuccess = 2,
  AndesTagTypeWarning = 3,
  AndesTagTypeError = 4,
};

enum AndesTextInputState : NSInteger;
enum AndesTextInputTraits : NSInteger;
@protocol AndesTextAreaDelegate;
@protocol UITextInputTraits;

SWIFT_CLASS("_TtC7AndesUI13AndesTextArea")
@interface AndesTextArea : UIView
/// The state of an AndesTextfield defines its behaviours an colours.
@property (nonatomic) enum AndesTextInputState state;
/// Text for the label of the textfield
@property (nonatomic, copy) IBInspectable NSString * _Nullable label;
/// Sets the helper label text
@property (nonatomic, copy) IBInspectable NSString * _Nullable helper;
/// if 0, its unlimited, anything else its the limit of chars the user can input.
@property (nonatomic) IBInspectable uint16_t counter;
/// sets the placeholder label text.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
/// sets the placeholder label text.
@property (nonatomic) IBInspectable uint16_t maxLines;
/// Use the predefined text input traits, if you need more customization, use setCustomInputTraits
@property (nonatomic) enum AndesTextInputTraits textInputTraits;
/// returns the current text
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
@property (nonatomic, weak) id <AndesTextAreaDelegate> _Nullable delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithState:(enum AndesTextInputState)state label:(NSString * _Nullable)label helper:(NSString * _Nullable)helper counter:(uint16_t)counter placeholder:(NSString * _Nullable)placeholder maxLines:(uint16_t)maxLines OBJC_DESIGNATED_INITIALIZER;
- (void)setCustomInputTraits:(id <UITextInputTraits> _Nonnull)traits;
@end


@interface AndesTextArea (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibState SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'state' instead.");
@end



@interface AndesTextArea (SWIFT_EXTENSION(AndesUI))
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isFirstResponder;
@property (nonatomic, strong) UIView * _Nullable inputView;
@property (nonatomic, strong) UIView * _Nullable inputAccessoryView;
@end

@class UITextRange;

SWIFT_PROTOCOL("_TtP7AndesUI21AndesTextAreaDelegate_")
@protocol AndesTextAreaDelegate
@optional
- (BOOL)andesTextAreaShouldBeginEditing:(AndesTextArea * _Nonnull)textArea SWIFT_WARN_UNUSED_RESULT;
- (BOOL)andesTextAreaShouldEndEditing:(AndesTextArea * _Nonnull)textArea SWIFT_WARN_UNUSED_RESULT;
- (void)andesTextAreaDidBeginEditing:(AndesTextArea * _Nonnull)textArea;
- (void)andesTextAreaDidEndEditing:(AndesTextArea * _Nonnull)textArea;
- (BOOL)andesTextArea:(AndesTextArea * _Nonnull)textArea shouldChangeCharactersIn:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (void)andesTextAreaDidChangeSelection:(AndesTextArea * _Nonnull)textArea selectedRange:(UITextRange * _Nullable)range;
- (void)andesTextAreaDidChange:(AndesTextArea * _Nonnull)textArea;
@end

@protocol AndesTextFieldLeftComponent;
@protocol AndesTextFieldRightComponent;
@protocol AndesTextFieldDelegate;

SWIFT_CLASS("_TtC7AndesUI14AndesTextField")
@interface AndesTextField : UIView
/// The state of an AndesTextfield defines its behaviours an colours.
@property (nonatomic) enum AndesTextInputState state;
/// Text for the label of the textfield
@property (nonatomic, copy) IBInspectable NSString * _Nullable label;
/// Sets the helper label text
@property (nonatomic, copy) IBInspectable NSString * _Nullable helper;
/// if 0, its unlimited, anything else its the limit of chars the user can input.
@property (nonatomic) IBInspectable uint16_t counter;
/// sets the placeholder label text.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
/// sets the left component, only supperted for simple TextField
@property (nonatomic, strong) id <AndesTextFieldLeftComponent> _Nullable leftContent;
/// sets the right component, only supperted for simple TextField
@property (nonatomic, strong) id <AndesTextFieldRightComponent> _Nullable rightContent;
/// Use the predefined text input traits, if you need more customization, use setCustomInputTraits
@property (nonatomic) enum AndesTextInputTraits textInputTraits;
/// returns the current text
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
@property (nonatomic, weak) id <AndesTextFieldDelegate> _Nullable delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithState:(enum AndesTextInputState)state label:(NSString * _Nullable)label helper:(NSString * _Nullable)helper counter:(uint16_t)counter placeholder:(NSString * _Nullable)placeholder OBJC_DESIGNATED_INITIALIZER;
- (void)setCustomInputTraits:(id <UITextInputTraits> _Nonnull)traits;
@end


@interface AndesTextField (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibState SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'state' instead.");
@end


@interface AndesTextField (SWIFT_EXTENSION(AndesUI))
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
@property (nonatomic, readonly) BOOL isFirstResponder;
@property (nonatomic, strong) UIView * _Nullable inputView;
@property (nonatomic, strong) UIView * _Nullable inputAccessoryView;
@end


enum AndesTextFieldCodeStyle : NSInteger;
enum AndesTextFieldCodeState : NSInteger;
@protocol AndesTextFieldCodeDelegate;

SWIFT_CLASS("_TtC7AndesUI18AndesTextFieldCode")
@interface AndesTextFieldCode : UIView
/// Text for the label of the AndesTextFieldCode.
@property (nonatomic, copy) IBInspectable NSString * _Nullable label;
/// Text for the helpLabel of the AndesTextFieldCode.
@property (nonatomic, copy) IBInspectable NSString * _Nullable helpLabel;
/// The style of an AndesTextFieldCode defines the amount of input boxes and how they are grouped.
@property (nonatomic) enum AndesTextFieldCodeStyle style;
/// The state of an AndesTextFieldCode defines its behaviours and colours.
@property (nonatomic) enum AndesTextFieldCodeState state;
/// The text of an AndesTextFieldCode defines the whole text entered taken from all input boxes.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
@property (nonatomic, weak) id <AndesTextFieldCodeDelegate> _Nullable delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLabel:(NSString * _Nullable)label helpLabel:(NSString * _Nullable)helpLabel style:(enum AndesTextFieldCodeStyle)style state:(enum AndesTextFieldCodeState)state OBJC_DESIGNATED_INITIALIZER;
@end


@interface AndesTextFieldCode (SWIFT_EXTENSION(AndesUI))
/// Set focus on the component.
- (void)setFocus;
/// Remove focus from the component.
- (void)removeFocus;
@end


SWIFT_PROTOCOL("_TtP7AndesUI26AndesTextFieldCodeDelegate_")
@protocol AndesTextFieldCodeDelegate <NSObject>
@optional
- (void)textDidChange:(NSString * _Nonnull)text;
- (void)textDidComplete:(BOOL)isComplete;
@end


@interface AndesTextFieldCode (SWIFT_EXTENSION(AndesUI)) <AndesTextFieldCodeDelegate>
- (void)textDidChange:(NSString * _Nonnull)text;
- (void)textDidComplete:(BOOL)isComplete;
@end


@interface AndesTextFieldCode (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibState SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'state' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'style' instead.");
@end



typedef SWIFT_ENUM(NSInteger, AndesTextFieldCodeState, open) {
  AndesTextFieldCodeStateIDLE = 0,
  AndesTextFieldCodeStateERROR = 1,
  AndesTextFieldCodeStateDISABLED = 2,
};

typedef SWIFT_ENUM(NSInteger, AndesTextFieldCodeStyle, open) {
  AndesTextFieldCodeStyleTHREESOME = 0,
  AndesTextFieldCodeStyleFOURSOME = 1,
  AndesTextFieldCodeStyleTHREE_BY_THREE = 2,
};

enum AndesTextFieldComponentVisibility : NSInteger;

/// Component that can be placed on the right side of an AndesTextField
SWIFT_PROTOCOL("_TtP7AndesUI28AndesTextFieldRightComponent_")
@protocol AndesTextFieldRightComponent
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@end


SWIFT_CLASS("_TtC7AndesUI29AndesTextFieldComponentAction")
@interface AndesTextFieldComponentAction : NSObject <AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)init:(NSString * _Nonnull)actionLabel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AndesUI28AndesTextFieldComponentCheck")
@interface AndesTextFieldComponentCheck : NSObject <AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AndesUI28AndesTextFieldComponentClear")
@interface AndesTextFieldComponentClear : NSObject <AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Component that can be placed on the left side of an AndesTextField
SWIFT_PROTOCOL("_TtP7AndesUI27AndesTextFieldLeftComponent_")
@protocol AndesTextFieldLeftComponent
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@end


SWIFT_CLASS("_TtC7AndesUI27AndesTextFieldComponentIcon")
@interface AndesTextFieldComponentIcon : NSObject <AndesTextFieldLeftComponent, AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
- (nonnull instancetype)initWithAndesIconName:(NSString * _Nonnull)andesIconName tintColor:(UIColor * _Nonnull)tintColor;
- (nonnull instancetype)initWithIcon:(UIImage * _Nonnull)icon tintColor:(UIColor * _Nonnull)tintColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AndesUI28AndesTextFieldComponentLabel")
@interface AndesTextFieldComponentLabel : NSObject <AndesTextFieldLeftComponent, AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AndesTextFieldComponentVisibility, open) {
  AndesTextFieldComponentVisibilityAlways = 0,
  AndesTextFieldComponentVisibilityWhenNotEmpty = 1,
};


/// Delegation of AndesTextField behaviour
SWIFT_PROTOCOL("_TtP7AndesUI22AndesTextFieldDelegate_")
@protocol AndesTextFieldDelegate
@optional
/// Called directly from UITextField ShouldBeginEditing
/// \param textField the textfield that’s triggering the event
///
- (BOOL)andesTextFieldShouldBeginEditing:(AndesTextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Called directly from UITextField ShouldEndEditing
/// \param textField the textfield that’s triggering the event
///
- (BOOL)andesTextFieldShouldEndEditing:(AndesTextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Called directly from UITextField didBeginEditing
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidBeginEditing:(AndesTextField * _Nonnull)textField;
/// Called directly from UITextField DidEndEditing
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidEndEditing:(AndesTextField * _Nonnull)textField;
/// Called directly from UITextField shouldChangeCharactersIn
/// \param textField the textfield that’s triggering the event
///
- (BOOL)andesTextField:(AndesTextField * _Nonnull)textField shouldChangeCharactersIn:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Called directly from UITextField didChangeSelection
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidChangeSelection:(AndesTextField * _Nonnull)textField selectedRange:(UITextRange * _Nullable)range SWIFT_AVAILABILITY(ios,introduced=13);
/// Called directly from UITextField didChange action
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidChange:(AndesTextField * _Nonnull)textField;
/// Called on action button touched up
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidTapRightAction:(AndesTextField * _Nonnull)textField;
/// Asks the delegate if the text field should process the pressing of the return button.
/// \param textField the textfield that’s triggering the event
///
- (BOOL)andesTextFieldShouldReturn:(AndesTextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate if the deleteBackward key was pressed.
/// \param textField the textfield that’s triggering the event
///
/// \param wasEmpty notifies if the textField text was empty before deleteBackward key was pressed.
///
- (void)andesTextField:(AndesTextField * _Nonnull)textField didDeleteBackwardAnd:(BOOL)wasEmpty;
@end



/// Used to define the colors of an AndesTextField
typedef SWIFT_ENUM(NSInteger, AndesTextInputState, open) {
  AndesTextInputStateIdle = 0,
  AndesTextInputStateError = 1,
  AndesTextInputStateDisabled = 2,
  AndesTextInputStateReadOnly = 3,
};

typedef SWIFT_ENUM(NSInteger, AndesTextInputTraits, open) {
  AndesTextInputTraitsPassword = 0,
  AndesTextInputTraitsEmail = 1,
  AndesTextInputTraitsNumberPad = 2,
  AndesTextInputTraitsCustom = 3,
};

enum AndesThumbnailHierarchy : NSInteger;
enum AndesThumbnailType : NSInteger;
enum AndesThumbnailSize : NSInteger;
enum AndesThumbnailState : NSInteger;

SWIFT_CLASS("_TtC7AndesUI14AndesThumbnail")
@interface AndesThumbnail : UIView
@property (nonatomic) enum AndesThumbnailHierarchy hierarchy;
@property (nonatomic) enum AndesThumbnailType type;
@property (nonatomic) enum AndesThumbnailSize size;
@property (nonatomic) enum AndesThumbnailState state;
@property (nonatomic, strong) IBInspectable UIImage * _Null_unspecified image;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable accentColor;
/// Constructor for Thumbnail when it is used programmatically where
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     hierarchy
///   </li>
///   <li>
///     style is the type of thumbnail you want to draw
///   </li>
///   <li>
///     size is the especification for the Thumbnail dimensions
///   </li>
///   <li>
///     state
///   </li>
///   <li>
///     image
///   </li>
///   <li>
///     accentColor
///   </li>
/// </ul>
- (nonnull instancetype)initWithHierarchy:(enum AndesThumbnailHierarchy)hierarchy type:(enum AndesThumbnailType)type size:(enum AndesThumbnailSize)size state:(enum AndesThumbnailState)state image:(UIImage * _Nonnull)image accentColor:(UIColor * _Nullable)accentColor OBJC_DESIGNATED_INITIALIZER;
/// Constructor for the thumbnail when it is used by interface builder
/// By defect, it will be .icon and .default
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface AndesThumbnail (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibSize SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'size' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibState SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'state' instead.");
@end

/// The AndesThumbnailHierarchy contains the differents hierarchies that a thumbnail supports
typedef SWIFT_ENUM(NSInteger, AndesThumbnailHierarchy, open) {
  AndesThumbnailHierarchyDefaultHierarchy = 0,
  AndesThumbnailHierarchyLoud = 1,
  AndesThumbnailHierarchyQuiet = 2,
};

/// The AndesThumbnailSize contains the differents sizes that a Thumbnail supports
typedef SWIFT_ENUM(NSInteger, AndesThumbnailSize, open) {
  AndesThumbnailSizeSize24 = 0,
  AndesThumbnailSizeSize32 = 1,
  AndesThumbnailSizeSize40 = 2,
  AndesThumbnailSizeSize48 = 3,
  AndesThumbnailSizeSize56 = 4,
  AndesThumbnailSizeSize64 = 5,
  AndesThumbnailSizeSize72 = 6,
  AndesThumbnailSizeSize80 = 7,
};

/// The AndesThumbnailState contains the differents states that a thumbnail supports
typedef SWIFT_ENUM(NSInteger, AndesThumbnailState, open) {
  AndesThumbnailStateEnabled = 0,
  AndesThumbnailStateDisabled = 1,
};

/// The AndesThumbnailType contains the differents types that a thumbnail supports
typedef SWIFT_ENUM(NSInteger, AndesThumbnailType, open) {
  AndesThumbnailTypeIcon = 0,
  AndesThumbnailTypeImageCircle = 1,
  AndesThumbnailTypeImageSquare = 2,
};



@interface UIColor (SWIFT_EXTENSION(AndesUI))
@end


/// Andes Color Palette
SWIFT_CLASS_NAMED("Andes")
@interface AndesColors : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull white;)
+ (UIColor * _Nonnull)white SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray040;)
+ (UIColor * _Nonnull)gray040 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray070;)
+ (UIColor * _Nonnull)gray070 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray100;)
+ (UIColor * _Nonnull)gray100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray250;)
+ (UIColor * _Nonnull)gray250 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray450;)
+ (UIColor * _Nonnull)gray450 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray800;)
+ (UIColor * _Nonnull)gray800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid040;)
+ (UIColor * _Nonnull)graySolid040 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid070;)
+ (UIColor * _Nonnull)graySolid070 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid100;)
+ (UIColor * _Nonnull)graySolid100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid250;)
+ (UIColor * _Nonnull)graySolid250 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid450;)
+ (UIColor * _Nonnull)graySolid450 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid800;)
+ (UIColor * _Nonnull)graySolid800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull yellowML500;)
+ (UIColor * _Nonnull)yellowML500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML100;)
+ (UIColor * _Nonnull)blueML100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML150;)
+ (UIColor * _Nonnull)blueML150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML200;)
+ (UIColor * _Nonnull)blueML200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML300;)
+ (UIColor * _Nonnull)blueML300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML400;)
+ (UIColor * _Nonnull)blueML400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML500;)
+ (UIColor * _Nonnull)blueML500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML600;)
+ (UIColor * _Nonnull)blueML600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML700;)
+ (UIColor * _Nonnull)blueML700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML800;)
+ (UIColor * _Nonnull)blueML800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP100;)
+ (UIColor * _Nonnull)blueMP100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP150;)
+ (UIColor * _Nonnull)blueMP150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP200;)
+ (UIColor * _Nonnull)blueMP200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP300;)
+ (UIColor * _Nonnull)blueMP300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP400;)
+ (UIColor * _Nonnull)blueMP400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP500;)
+ (UIColor * _Nonnull)blueMP500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP600;)
+ (UIColor * _Nonnull)blueMP600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP700;)
+ (UIColor * _Nonnull)blueMP700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP800;)
+ (UIColor * _Nonnull)blueMP800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green100;)
+ (UIColor * _Nonnull)green100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green150;)
+ (UIColor * _Nonnull)green150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green200;)
+ (UIColor * _Nonnull)green200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green300;)
+ (UIColor * _Nonnull)green300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green400;)
+ (UIColor * _Nonnull)green400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green500;)
+ (UIColor * _Nonnull)green500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green600;)
+ (UIColor * _Nonnull)green600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green700;)
+ (UIColor * _Nonnull)green700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green800;)
+ (UIColor * _Nonnull)green800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange100;)
+ (UIColor * _Nonnull)orange100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange150;)
+ (UIColor * _Nonnull)orange150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange200;)
+ (UIColor * _Nonnull)orange200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange300;)
+ (UIColor * _Nonnull)orange300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange400;)
+ (UIColor * _Nonnull)orange400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange500;)
+ (UIColor * _Nonnull)orange500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange600;)
+ (UIColor * _Nonnull)orange600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange700;)
+ (UIColor * _Nonnull)orange700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange800;)
+ (UIColor * _Nonnull)orange800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red100;)
+ (UIColor * _Nonnull)red100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red150;)
+ (UIColor * _Nonnull)red150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red200;)
+ (UIColor * _Nonnull)red200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red300;)
+ (UIColor * _Nonnull)red300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red400;)
+ (UIColor * _Nonnull)red400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red500;)
+ (UIColor * _Nonnull)red500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red600;)
+ (UIColor * _Nonnull)red600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red700;)
+ (UIColor * _Nonnull)red700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red800;)
+ (UIColor * _Nonnull)red800 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface UILabel (SWIFT_EXTENSION(AndesUI))
- (void)setAndesStyleWithStyle:(AndesFontStyle * _Nonnull)style;
@end



@interface UITextView (SWIFT_EXTENSION(AndesUI))
- (void)setAndesStyleWithStyle:(AndesFontStyle * _Nonnull)style;
@end



@interface UIViewController (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, readonly, strong) AndesBottomSheetViewController * _Nullable sheetViewController;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef ANDESUI_SWIFT_H
#define ANDESUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AndesUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// Used to define the kind or border of an AndesBadge
typedef SWIFT_ENUM(NSInteger, AndesBadgeBorder, open) {
  AndesBadgeBorderStandard = 0,
  AndesBadgeBorderCorner = 1,
  AndesBadgeBorderRounded = 2,
};

enum AndesBadgeType : NSInteger;
@class NSCoder;

SWIFT_CLASS("_TtC7AndesUI13AndesBadgeDot")
@interface AndesBadgeDot : UIView
/// Defines the colors/icon of the Badge Dot
@property (nonatomic) enum AndesBadgeType type;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AndesBadgeType)type OBJC_DESIGNATED_INITIALIZER;
@end

/// Used to define the style of an AndesBadge
typedef SWIFT_ENUM(NSInteger, AndesBadgeHierarchy, open) {
  AndesBadgeHierarchyLoud = 0,
  AndesBadgeHierarchyQuiet = 1,
};

enum AndesBadgeSize : NSInteger;

SWIFT_CLASS("_TtC7AndesUI14AndesBadgePill")
@interface AndesBadgePill : UIView
/// Defines the hierarchy of an AndesBadge
@property (nonatomic) enum AndesBadgeHierarchy hierarchy;
/// Defines the colors/icon of the Badge
@property (nonatomic) enum AndesBadgeType type;
/// Defines the border style (Pill only)
@property (nonatomic) enum AndesBadgeBorder border;
/// Defines the size of the AndesBadge
@property (nonatomic) enum AndesBadgeSize size;
/// Defines the current text (Pill only)
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHierarchy:(enum AndesBadgeHierarchy)hierarchy type:(enum AndesBadgeType)type border:(enum AndesBadgeBorder)border size:(enum AndesBadgeSize)size text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
@end


@interface AndesBadgePill (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibBorder SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'border' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibSize SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'size' instead.");
@end

/// The AndesBadgeSize contains the differents sizes that a badge supports
typedef SWIFT_ENUM(NSInteger, AndesBadgeSize, open) {
  AndesBadgeSizeSmall = 0,
  AndesBadgeSizeLarge = 1,
};

/// Used to define the colors of an AndesBadge
typedef SWIFT_ENUM(NSInteger, AndesBadgeType, open) {
  AndesBadgeTypeNeutral = 0,
  AndesBadgeTypeHighlight = 1,
  AndesBadgeTypeSuccess = 2,
  AndesBadgeTypeWarning = 3,
  AndesBadgeTypeError = 4,
};


SWIFT_CLASS("_TtC7AndesUI24AndesBottomSheetTitleBar")
@interface AndesBottomSheetTitleBar : UIView
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic) NSTextAlignment textAlignment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIEvent;

SWIFT_CLASS("_TtC7AndesUI32AndesBottomSheetTitleBarGradient")
@interface AndesBottomSheetTitleBarGradient : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)_;
- (BOOL)pointInside:(CGPoint)_ withEvent:(UIEvent * _Nullable)_ SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol AndesBottomSheetViewControllerDelegate;
@protocol UIContentContainer;
@class NSBundle;

SWIFT_CLASS("_TtC7AndesUI30AndesBottomSheetViewController")
@interface AndesBottomSheetViewController : UIViewController
@property (nonatomic, readonly, strong) UIViewController * _Nonnull rootViewController;
@property (nonatomic, weak) id <AndesBottomSheetViewControllerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) AndesBottomSheetTitleBar * _Nonnull titleBar;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id <UIContentContainer> _Nonnull)container;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



SWIFT_PROTOCOL("_TtP7AndesUI38AndesBottomSheetViewControllerDelegate_")
@protocol AndesBottomSheetViewControllerDelegate
- (void)sheetViewController:(AndesBottomSheetViewController * _Nonnull)sheetViewController heightDidChange:(CGFloat)height;
@end

enum AndesButtonHierarchy : NSInteger;
enum AndesButtonSize : NSInteger;
@class AndesButtonIcon;

/// User interface element the user can tap or click to perform an action.
/// Has all the same features as an [UIButton] but reinforces the Andes style.
/// Is compatible to use via code or via Interface Builder.
/// The AndesButton has several custom atributes that allows you to specified the button look and feel.
/// For style:
/// <ul>
///   <li>
///     Loud
///   </li>
///   <li>
///     Quiet
///   </li>
///   <li>
///     Transparent
///   </li>
/// </ul>
/// For size:
/// <ul>
///   <li>
///     Large (this is the only size that supports an icon)
///   </li>
///   <li>
///     Medium
///   </li>
///   <li>
///     Small
///   </li>
/// </ul>
/// The responsibility of the AndesButton is to know how it should be represent based on the attributes provided
SWIFT_CLASS("_TtC7AndesUI11AndesButton")
@interface AndesButton : UIControl
/// returns the current selected hierarchy
@property (nonatomic) enum AndesButtonHierarchy hierarchy;
/// returns the current selected size
@property (nonatomic) enum AndesButtonSize size;
/// returns the current text
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
/// returns the current selected hierarchy
@property (nonatomic, readonly, strong) AndesButtonIcon * _Nullable icon;
@property (nonatomic, getter=isEnabled) IBInspectable BOOL enabled;
/// Constructor for button when it is used programmatically where
/// \param text  is text that the button will contain 
///
/// \param style is the type of button you want to draw 
///
/// \param size is the especification for the button dimensions 
///
/// \param icon (optional) allows to inyect an icon, only if the size specified is .large 
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text hierarchy:(enum AndesButtonHierarchy)hierarchy size:(enum AndesButtonSize)size icon:(AndesButtonIcon * _Nullable)icon OBJC_DESIGNATED_INITIALIZER;
/// Constructor for the button when it is used by interface builder
/// By defect, it will be .loud and .large
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Sets up the icon size to .large with the specified icon
/// \param icon the icon with its respective orientation 
///
- (void)setLargeSizeWithIcon:(AndesButtonIcon * _Nonnull)icon;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AndesButton (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibSize SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'size' instead.");
@end

/// The AndesButtonSize contains the differents styles that a button supports
typedef SWIFT_ENUM(NSInteger, AndesButtonHierarchy, open) {
  AndesButtonHierarchyLoud = 0,
  AndesButtonHierarchyQuiet = 1,
  AndesButtonHierarchyTransparent = 2,
};

@class UIImage;
enum AndesButtonOrientation : NSInteger;

/// Object model that contains the Button Icon representation
SWIFT_CLASS("_TtC7AndesUI15AndesButtonIcon")
@interface AndesButtonIcon : NSObject
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
@property (nonatomic, readonly) enum AndesButtonOrientation orientation;
- (nonnull instancetype)initWithIcon:(UIImage * _Nonnull)icon orientation:(enum AndesButtonOrientation)orientation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the orientation of the icon in the Button, the icon can be at the right or left
typedef SWIFT_ENUM(NSInteger, AndesButtonOrientation, open) {
  AndesButtonOrientationLeft = 0,
  AndesButtonOrientationRight = 1,
};

/// The AndesButtonSize contains the differents sizes that a button supports
typedef SWIFT_ENUM(NSInteger, AndesButtonSize, open) {
  AndesButtonSizeLarge = 0,
  AndesButtonSizeMedium = 1,
  AndesButtonSizeSmall = 2,
};

enum AndesCardPadding : NSInteger;
enum AndesCardHierarchy : NSInteger;
enum AndesCardStyle : NSInteger;
enum AndesCardType : NSInteger;

SWIFT_CLASS("_TtC7AndesUI9AndesCard")
@interface AndesCard : UIView
/// Sets the title of the AndesCard
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
/// Sets the padding of the AndesCard
@property (nonatomic) enum AndesCardPadding padding;
/// Sets the hierarchy of the AndesCard
@property (nonatomic) enum AndesCardHierarchy hierarchy;
/// Sets the style of the AndesCard
@property (nonatomic) enum AndesCardStyle style;
/// Sets the type of AndesCard
@property (nonatomic) enum AndesCardType type;
@property (nonatomic, readonly, copy) NSString * _Nullable actionLinkTitle;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCardView:(UIView * _Nonnull)cardView title:(NSString * _Nullable)title padding:(enum AndesCardPadding)padding hierarchy:(enum AndesCardHierarchy)hierarchy style:(enum AndesCardStyle)style type:(enum AndesCardType)type OBJC_DESIGNATED_INITIALIZER;
/// Link action, when defined a link button will appear
/// \param title Link text
///
/// \param handler handler to trigger on link tap
///
- (void)setLinkAction:(NSString * _Nonnull)title handler:(void (^ _Nonnull)(AndesCard * _Nonnull))handler;
/// Remove link action if present
- (void)removeLinkAction;
/// Card action, transforms the card into a button
/// \param handler handler to trigger on link tap
///
- (void)setCardActionWithHandler:(void (^ _Nonnull)(AndesCard * _Nonnull))handler;
/// Remove card action if present
- (void)removeCardAction;
@end



@interface AndesCard (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibPadding SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'padding' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'style' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@end

/// Used to define the hierarchy of an AndesCard
typedef SWIFT_ENUM(NSInteger, AndesCardHierarchy, open) {
  AndesCardHierarchyPrimary = 0,
  AndesCardHierarchySecondary = 1,
  AndesCardHierarchySecondaryDark = 2,
};

/// Used to define the padding of an AndesCard
typedef SWIFT_ENUM(NSInteger, AndesCardPadding, open) {
  AndesCardPaddingNone = 0,
  AndesCardPaddingSmall = 1,
  AndesCardPaddingMedium = 2,
  AndesCardPaddingLarge = 3,
  AndesCardPaddingXlarge = 4,
};

/// Used to define the style of an AndesCard
typedef SWIFT_ENUM(NSInteger, AndesCardStyle, open) {
  AndesCardStyleElevated = 0,
  AndesCardStyleOutline = 1,
};

/// Used to define the type of an AndesCard
typedef SWIFT_ENUM(NSInteger, AndesCardType, open) {
  AndesCardTypeNone = 0,
  AndesCardTypeHighlight = 1,
  AndesCardTypeError = 2,
  AndesCardTypeSuccess = 3,
  AndesCardTypeWarning = 4,
};

typedef SWIFT_ENUM(NSInteger, AndesCellType, open) {
  AndesCellTypeSimple = 0,
  AndesCellTypeChevron = 1,
  AndesCellTypeRadioButton = 2,
  AndesCellTypeCheckBox = 3,
};

enum AndesCheckboxType : NSInteger;
enum AndesCheckboxAlign : NSInteger;
enum AndesCheckboxStatus : NSInteger;

SWIFT_CLASS("_TtC7AndesUI13AndesCheckbox")
@interface AndesCheckbox : UIView
/// Sets the title of the AndesCheckbox
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
/// Sets the type of the AndesCaheckbox , default idle
@property (nonatomic) enum AndesCheckboxType type;
/// Sets the slign of the AndesCaheckbox , default left
@property (nonatomic) enum AndesCheckboxAlign align;
/// Sets the status of the AndesCaheckbox , default unselected
@property (nonatomic) enum AndesCheckboxStatus status;
/// Set dismiss callback to be invoked when checkbox button is pressed
- (void)setCheckboxDidTappedWithCallback:(void (^ _Nonnull)(AndesCheckbox * _Nonnull))callback;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AndesCheckboxType)type align:(enum AndesCheckboxAlign)align status:(enum AndesCheckboxStatus)status title:(NSString * _Nonnull)title OBJC_DESIGNATED_INITIALIZER;
@end



@interface AndesCheckbox (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibStatus SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'status' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibAlign SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'align' instead.");
@end

/// Used to set the checkbox align
typedef SWIFT_ENUM(NSInteger, AndesCheckboxAlign, open) {
  AndesCheckboxAlignLeft = 0,
  AndesCheckboxAlignRight = 1,
};

/// Used to set the checkbox status
typedef SWIFT_ENUM(NSInteger, AndesCheckboxStatus, open) {
  AndesCheckboxStatusSelected = 0,
  AndesCheckboxStatusUnselected = 1,
  AndesCheckboxStatusUndefined = 2,
};

/// Used to set the checkbox type
typedef SWIFT_ENUM(NSInteger, AndesCheckboxType, open) {
  AndesCheckboxTypeIdle = 0,
  AndesCheckboxTypeDisabled = 1,
  AndesCheckboxTypeError = 2,
};


/// This class is a custom cell to AndesUI
/// requires:
/// See the AndesSimpleCell and AndesChevronCell documentation for integration
/// important:
/// This class cannot be initialize
SWIFT_CLASS("_TtC7AndesUI13AndesListCell")
@interface AndesListCell : UITableViewCell
@property (nonatomic, readonly) enum AndesCellType type;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
@end

@class AndesThumbnail;

/// This class is a custom cell to AndesUI, this cell has a basic configuration and a chevron to the right
SWIFT_CLASS("_TtC7AndesUI16AndesChevronCell")
@interface AndesChevronCell : AndesListCell
/// This method initialize an AndesChevronCell to draw the row just objc
/// authors:
/// @Jona
/// version:
/// Available since 3.13.0
/// \param title Set the title for the cell
///
/// \param subtitle Set the subtitle for the cell
///
/// \param thumbnail Set a thumbnail to the left of the cell
///
/// \param numberOfLines Set the number of lines to the cell title, the default is 0
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle thumbnail:(AndesThumbnail * _Nullable)thumbnail numberOfLines:(NSInteger)numberOfLines OBJC_DESIGNATED_INITIALIZER;
@end

@class AndesCoachMarkStepEntity;
@class UIScrollView;

SWIFT_CLASS("_TtC7AndesUI20AndesCoachMarkEntity")
@interface AndesCoachMarkEntity : NSObject
- (nonnull instancetype)initWithSteps:(NSArray<AndesCoachMarkStepEntity *> * _Nonnull)steps scrollView:(UIScrollView * _Nullable)scrollView completionHandler:(void (^ _Nullable)(void))completionHandler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HighlightStyle : NSInteger;

SWIFT_CLASS("_TtC7AndesUI24AndesCoachMarkStepEntity")
@interface AndesCoachMarkStepEntity : NSObject
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title description:(NSString * _Nonnull)description view:(UIView * _Nonnull)view style:(enum HighlightStyle)style nextText:(NSString * _Nonnull)nextText OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HighlightStyle, open) {
  HighlightStyleRectangle = 0,
  HighlightStyleCircle = 1,
};

@protocol AndesCoachMarkViewDelegate;
@class UIColor;

SWIFT_CLASS("_TtC7AndesUI18AndesCoachMarkView")
@interface AndesCoachMarkView : UIView
@property (nonatomic, weak) id <AndesCoachMarkViewDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) UIColor * _Nonnull overlayColor;
- (nonnull instancetype)initWithModel:(AndesCoachMarkEntity * _Nonnull)model OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end





SWIFT_PROTOCOL("_TtP7AndesUI26AndesCoachMarkViewDelegate_")
@protocol AndesCoachMarkViewDelegate
- (void)onShowNextWithStepIndex:(NSInteger)stepIndex;
- (void)onCloseWithStepIndex:(NSInteger)stepIndex;
@end


/// AndesColors is used to create a new StyleSheet
/// implementing all the necessary colors
SWIFT_PROTOCOL("_TtP7AndesUI11AndesColors_")
@protocol AndesColors
/// The default colors that you need to override
/// to use your color palette through all the UI components
@property (nonatomic, readonly, strong) UIColor * _Nonnull bgColorPrimary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull bgColorSecondary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull bgColorWhite;
@property (nonatomic, readonly, strong) UIColor * _Nonnull brandColor500;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor100;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor150;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor200;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor300;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor400;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor500;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor600;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor700;
@property (nonatomic, readonly, strong) UIColor * _Nonnull accentColor800;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorPrimary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorSecondary;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorDisabled;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorNegative;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorCaution;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorPositive;
@property (nonatomic, readonly, strong) UIColor * _Nonnull tetColorLink;
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColorWhite;
@property (nonatomic, readonly, strong) UIColor * _Nonnull feedbackColorNegative;
@property (nonatomic, readonly, strong) UIColor * _Nonnull feedbackColorCaution;
@property (nonatomic, readonly, strong) UIColor * _Nonnull feedbackColorPositive;
@end


SWIFT_CLASS("_TtC7AndesUI15AndesDatePicker")
@interface AndesDatePicker : UIControl
/// Date Picker: is a component of quick choice of dates
/// \param maxDate maximum date allowed to select a date (date after that it will not be allowed to select)
///
/// \param callback will return the selected date and if the confirmation button was pressed
///
- (void)setDatePickerDateWithMaxDate:(NSDate * _Nullable)maxDate callback:(void (^ _Nonnull)(NSDate * _Nullable, BOOL))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC7AndesUI13AndesFontSize")
@interface AndesFontSize : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleXL;)
+ (CGFloat)titleXL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleL;)
+ (CGFloat)titleL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleM;)
+ (CGFloat)titleM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleS;)
+ (CGFloat)titleS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat titleXS;)
+ (CGFloat)titleXS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat bodyL;)
+ (CGFloat)bodyL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat bodyM;)
+ (CGFloat)bodyM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat bodyS;)
+ (CGFloat)bodyS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat bodyXS;)
+ (CGFloat)bodyXS SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIFont;

SWIFT_CLASS("_TtC7AndesUI14AndesFontStyle")
@interface AndesFontStyle : NSObject
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColor;
@property (nonatomic, readonly, strong) UIFont * _Nonnull font;
@property (nonatomic, readonly) CGFloat lineSpacing;
@property (nonatomic, readonly) CGFloat lineHeight SWIFT_DEPRECATED_MSG("", "lineSpacing");
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font lineHeight:(CGFloat)lineHeight OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Please use init with init(textColor:font:lineSpacing:)' instead");
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font lineSpacing:(CGFloat)lineSpacing OBJC_DESIGNATED_INITIALIZER;
/// Init an AndesFontStyle with a sketch line height
/// \param textColor Font Color
///
/// \param font font (with sketch size)
///
/// \param sketchLineHeight line height
///
- (nonnull instancetype)initWithTextColor:(UIColor * _Nonnull)textColor font:(UIFont * _Nonnull)font sketchLineHeight:(CGFloat)sketchLineHeight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AndesFonts is used to create a new StyleSheet
/// implementing all the necessary fonts
SWIFT_PROTOCOL("_TtP7AndesUI10AndesFonts_")
@protocol AndesFonts
/// The default font variations that you need to override
/// to use your own font through all the UI components.
/// By default these return the SF system font
- (AndesFontStyle * _Nonnull)titleXLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleMWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleXSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyMWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodySWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyXSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)regularSystemFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)lightSystemFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)mediumSystemFontOfSizeWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)semiboldSystemFontOfSizeWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;

SWIFT_CLASS("_TtC7AndesUI18AndesIconsProvider")
@interface AndesIconsProvider : NSObject
/// Loads an Andes icon
/// \param name icon name
///
/// \param success called icon if found
///
+ (void)loadIconWithName:(NSString * _Nonnull)name success:(SWIFT_NOESCAPE void (^ _Nonnull)(UIImage * _Nonnull))success;
/// Loads an Andes icon
/// \param name icon name
///
/// \param success called if icon found
///
/// \param failure called if icon not found
///
+ (void)loadIconWithName:(NSString * _Nonnull)name success:(SWIFT_NOESCAPE void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
/// Loads an Andes icon and inserts into a UIImageView
/// \param name icon name
///
/// \param placeItInto image view to place icon into
///
+ (void)loadIconWithName:(NSString * _Nonnull)name placeItInto:(UIImageView * _Nonnull)placeItInto;
/// Loads an Andes icon and inserts into a UIImageView
/// \param name icon name
///
/// \param placeItInto image view to place icon into
///
/// \param failure called if icon not found
///
+ (void)loadIconWithName:(NSString * _Nonnull)name placeItInto:(UIImageView * _Nonnull)placeItInto failure:(void (^ _Nonnull)(NSError * _Nullable))failure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7AndesUI18AndesIconsStrategy_")
@protocol AndesIconsStrategy
/// Provides an icon retrieved from Images.xcassets, if not found, calls failure with nil
/// \param name icon name
///
/// \param success called if icon found
///
/// \param failure called if icon not found or error occured
///
- (void)loadIconWithName:(NSString * _Nonnull)name success:(SWIFT_NOESCAPE void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nullable)(NSError * _Nullable))failure;
@end

@protocol AndesListDelegate;
@protocol AndesListDataSource;
enum AndesSeparatorStyle : NSInteger;
enum AndesSelectionStyle : NSInteger;
enum AndesListSize : NSInteger;

/// This class is a custom UITableView to AndesUI
SWIFT_CLASS("_TtC7AndesUI9AndesList")
@interface AndesList : UIView
/// Set the delegate to use own methods
@property (nonatomic, weak) id <AndesListDelegate> _Nullable delegate;
/// Set the dataSource to use own methods
@property (nonatomic, weak) id <AndesListDataSource> _Nullable dataSource;
/// Set the separator style, default value .none
@property (nonatomic) enum AndesSeparatorStyle separatorStyle;
/// Set the selection style, default value .default
@property (nonatomic) enum AndesSelectionStyle selectionStyle;
/// Set the list type, default value simple
@property (nonatomic) enum AndesCellType listType;
/// Set the list size, default value medium
@property (nonatomic) enum AndesListSize size;
/// This method reload the data
- (void)reloadData;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AndesList (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'listType' instead.");
@end




SWIFT_PROTOCOL("_TtP7AndesUI19AndesListDataSource_")
@protocol AndesListDataSource
- (AndesListCell * _Nonnull)andesList:(AndesList * _Nonnull)listView cellForRowAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)andesList:(AndesList * _Nonnull)listView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSections:(AndesList * _Nonnull)listView SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol of AndesList behaviour
SWIFT_PROTOCOL("_TtP7AndesUI17AndesListDelegate_")
@protocol AndesListDelegate
@optional
- (void)andesList:(AndesList * _Nonnull)listView didSelectRowAt:(NSIndexPath * _Nonnull)indexPath;
@end

typedef SWIFT_ENUM(NSInteger, AndesListSize, open) {
  AndesListSizeSmall = 0,
  AndesListSizeMedium = 1,
  AndesListSizeLarge = 2,
};

enum AndesMessageHierarchy : NSInteger;
enum AndesMessageType : NSInteger;

SWIFT_CLASS("_TtC7AndesUI12AndesMessage")
@interface AndesMessage : UIView
/// Sets the hierarchy of the AndesMessage
@property (nonatomic) enum AndesMessageHierarchy hierarchy;
/// Sets the type of the AndesMessage
@property (nonatomic) enum AndesMessageType type;
/// Sets the title of the AndesMessage
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
/// Sets the body of the AndesMessage
@property (nonatomic, copy) IBInspectable NSString * _Nonnull body;
/// isDismissable shows a dismiss button, when pressed the message set isHidden = true
@property (nonatomic) IBInspectable BOOL isDismissable;
/// if set, a primary button will be shown
@property (nonatomic, copy) IBInspectable NSString * _Nullable primaryActionText;
/// if set, a secondary button will be shown, requieres primary to be set
@property (nonatomic, copy) IBInspectable NSString * _Nullable secondaryActionText;
@property (nonatomic, copy) IBInspectable NSString * _Nullable linkActionText;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHierarchy:(enum AndesMessageHierarchy)hierarchy type:(enum AndesMessageType)type title:(NSString * _Nonnull)title body:(NSString * _Nonnull)body OBJC_DESIGNATED_INITIALIZER;
/// handler to trigger when the user dismisses the message
/// \param handler dismiss handler
///
- (void)onDismiss:(void (^ _Nullable)(AndesMessage * _Nonnull))callback;
/// Primary action, when defined with a title a button will show on the message
/// \param title Button text
///
/// \param handler handler to trigger when button pressed
///
- (void)setPrimaryAction:(NSString * _Nonnull)title handler:(void (^ _Nullable)(AndesMessage * _Nonnull))handler;
/// Actions that shows oly if primary action defined.
/// \param title Button text
///
/// \param handler handler to trigger when button pressed
///
- (void)setSecondaryAction:(NSString * _Nonnull)title handler:(void (^ _Nullable)(AndesMessage * _Nonnull))handler;
/// Link action, when defined with a title a button will show on the message
/// \param title Link text
///
/// \param handler handler to trigger when link is pressed
///
- (void)setLinkAction:(NSString * _Nonnull)title handler:(void (^ _Nullable)(AndesMessage * _Nonnull))handler;
@end



@interface AndesMessage (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@end

/// Used to define the style of an AndesMessage
typedef SWIFT_ENUM(NSInteger, AndesMessageHierarchy, open) {
  AndesMessageHierarchyLoud = 0,
  AndesMessageHierarchyQuiet = 1,
};

/// Used to define the colors of an AndesMessage
typedef SWIFT_ENUM(NSInteger, AndesMessageType, open) {
  AndesMessageTypeNeutral = 0,
  AndesMessageTypeSuccess = 1,
  AndesMessageTypeWarning = 2,
  AndesMessageTypeError = 3,
};

enum AndesRadioButtonType : NSInteger;
enum AndesRadioButtonAlign : NSInteger;
enum AndesRadioButtonStatus : NSInteger;

SWIFT_CLASS("_TtC7AndesUI16AndesRadioButton")
@interface AndesRadioButton : UIView
/// Sets the title of the RadioButton
@property (nonatomic, copy) IBInspectable NSString * _Nullable title;
/// Sets the type of the RadioButton , default idle
@property (nonatomic) enum AndesRadioButtonType type;
/// Sets the slign of the RadioButton , default left
@property (nonatomic) enum AndesRadioButtonAlign align;
/// Sets the status of the RadioButton , default unselected
@property (nonatomic) enum AndesRadioButtonStatus status;
/// Set dismiss callback to be invoked when checkbox button is pressed
- (void)setRadioButtonTappedWithCallback:(void (^ _Nonnull)(AndesRadioButton * _Nonnull))callback;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(enum AndesRadioButtonType)type align:(enum AndesRadioButtonAlign)align status:(enum AndesRadioButtonStatus)status title:(NSString * _Nonnull)title OBJC_DESIGNATED_INITIALIZER;
@end



@interface AndesRadioButton (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibStatus SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'status' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibAlign SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'align' instead.");
@end

typedef SWIFT_ENUM(NSInteger, AndesRadioButtonAlign, open) {
  AndesRadioButtonAlignLeft = 0,
  AndesRadioButtonAlignRight = 1,
};

typedef SWIFT_ENUM(NSInteger, AndesRadioButtonStatus, open) {
  AndesRadioButtonStatusSelected = 0,
  AndesRadioButtonStatusUnselected = 1,
};

/// Used to set the radiobutton type
typedef SWIFT_ENUM(NSInteger, AndesRadioButtonType, open) {
  AndesRadioButtonTypeIdle = 0,
  AndesRadioButtonTypeDisabled = 1,
  AndesRadioButtonTypeError = 2,
};

typedef SWIFT_ENUM(NSInteger, AndesSelectionStyle, open) {
  AndesSelectionStyleGray = 0,
  AndesSelectionStyleBlue = 1,
  AndesSelectionStyleNone = 2,
  AndesSelectionStyleDefaultStyle = 3,
};

typedef SWIFT_ENUM(NSInteger, AndesSeparatorStyle, open) {
  AndesSeparatorStyleNone = 0,
  AndesSeparatorStyleSingleLine = 1,
};


/// This class is a custom cell to AndesUI, this cell has a basic configuration
SWIFT_CLASS("_TtC7AndesUI15AndesSimpleCell")
@interface AndesSimpleCell : AndesListCell
/// This method initialize an AndesSimpleCell to draw the row just objc
/// authors:
/// @Jona
/// version:
/// Available since 3.13.0
/// \param title Set the title for the cell
///
/// \param subtitle Set the subtitle for the cell
///
/// \param thumbnail Set a thumbnail to the left of the cell
///
/// \param numberOfLines Set the number of lines to the cell title, the default is 0
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle thumbnail:(AndesThumbnail * _Nullable)thumbnail numberOfLines:(NSInteger)numberOfLines OBJC_DESIGNATED_INITIALIZER;
@end

enum AndesSnackbarDuration : NSInteger;
enum AndesSnackbarType : NSInteger;
@class AndesSnackbarAction;

/// It is a short message that can be displayed for a defined time or require user action.
/// It always appears at the bottom of the screen above any content. Snackbars disappear automatically.
SWIFT_CLASS("_TtC7AndesUI13AndesSnackbar")
@interface AndesSnackbar : UIView
/// Text shown in Snackbar
@property (nonatomic, copy) NSString * _Nonnull text;
/// Snackbars disappear automatically after this value in seconds.
/// By default the duration is <code>normal</code> (6 seconds)
@property (nonatomic) enum AndesSnackbarDuration duration;
/// Snackbar can be shown for different types of feedback.
/// To enforce the kind of feedback we use different colors.
@property (nonatomic) enum AndesSnackbarType type;
/// Snackbar can show an action button, use this property to set the title and callback for that action
@property (nonatomic, strong) AndesSnackbarAction * _Nullable action;
/// Show the <code>Snackbar</code> at the top visible view controller
/// If you are showing the snackbar as a result of an async operation consider use <code>show(at viewController:)</code>
/// to ensure that  the <code>Snackbar</code> is shown in the right view controller.
/// If another <code>Snackbars</code> are being shown, this is going to be shown when the last one is dismissed.
- (void)show;
/// Show the Snackbar in the view controller received
- (void)showAt:(UIViewController * _Nonnull)viewController;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text duration:(enum AndesSnackbarDuration)duration type:(enum AndesSnackbarType)type OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7AndesUI19AndesSnackbarAction")
@interface AndesSnackbarAction : NSObject
/// Initialize the Snackbar action with the text shown in the button and the action to call when tapped
/// \param text Text shown in the snackbar action
///
/// \param callback Callback called when snackbar button is pressed. The snackbar is going to be dismissed when this callback is invoked.
///
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text callback:(void (^ _Nullable)(void))callback OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents the duration for Snackbar to be shown
typedef SWIFT_ENUM(NSInteger, AndesSnackbarDuration, open) {
/// For short text size, shows Snackbar for 3 seconds
  AndesSnackbarDurationShort = 3,
/// For medium text size, shows Snackbar for 6 seconds
  AndesSnackbarDurationNormal = 6,
/// For long texts, shows Snackbar for 10 seconds
  AndesSnackbarDurationLong = 10,
};

/// Tags allow you to filter content using color-based categories. A color is defined for each type.
typedef SWIFT_ENUM(NSInteger, AndesSnackbarType, open) {
  AndesSnackbarTypeNeutral = 0,
  AndesSnackbarTypeSuccess = 1,
  AndesSnackbarTypeError = 2,
};


SWIFT_PROTOCOL("_TtP7AndesUI15AndesStyleSheet_")
@protocol AndesStyleSheet <AndesColors, AndesFonts>
@end


SWIFT_CLASS("_TtC7AndesUI22AndesStyleSheetDefault")
@interface AndesStyleSheetDefault : NSObject <AndesStyleSheet>
@property (nonatomic, strong) UIColor * _Nonnull bgColorPrimary;
@property (nonatomic, strong) UIColor * _Nonnull bgColorSecondary;
@property (nonatomic, strong) UIColor * _Nonnull bgColorWhite;
@property (nonatomic, strong) UIColor * _Nonnull brandColor500;
@property (nonatomic, strong) UIColor * _Nonnull accentColor;
@property (nonatomic, strong) UIColor * _Nonnull accentColor100;
@property (nonatomic, strong) UIColor * _Nonnull accentColor150;
@property (nonatomic, strong) UIColor * _Nonnull accentColor200;
@property (nonatomic, strong) UIColor * _Nonnull accentColor300;
@property (nonatomic, strong) UIColor * _Nonnull accentColor400;
@property (nonatomic, strong) UIColor * _Nonnull accentColor500;
@property (nonatomic, strong) UIColor * _Nonnull accentColor600;
@property (nonatomic, strong) UIColor * _Nonnull accentColor700;
@property (nonatomic, strong) UIColor * _Nonnull accentColor800;
@property (nonatomic, strong) UIColor * _Nonnull textColorPrimary;
@property (nonatomic, strong) UIColor * _Nonnull textColorSecondary;
@property (nonatomic, strong) UIColor * _Nonnull textColorDisabled;
@property (nonatomic, strong) UIColor * _Nonnull textColorNegative;
@property (nonatomic, strong) UIColor * _Nonnull textColorCaution;
@property (nonatomic, strong) UIColor * _Nonnull textColorPositive;
@property (nonatomic, strong) UIColor * _Nonnull tetColorLink;
@property (nonatomic, strong) UIColor * _Nonnull textColorWhite;
@property (nonatomic, strong) UIColor * _Nonnull feedbackColorCaution;
@property (nonatomic, strong) UIColor * _Nonnull feedbackColorPositive;
@property (nonatomic, strong) UIColor * _Nonnull feedbackColorNegative;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (AndesFontStyle * _Nonnull)titleXLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleMWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)titleXSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyLWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyMWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodySWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (AndesFontStyle * _Nonnull)bodyXSWithColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)regularSystemFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)lightSystemFontWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)mediumSystemFontOfSizeWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
- (UIFont * _Nonnull)semiboldSystemFontOfSizeWithSize:(CGFloat)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7AndesUI22AndesStyleSheetManager")
@interface AndesStyleSheetManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <AndesStyleSheet> _Nonnull styleSheet;)
+ (id <AndesStyleSheet> _Nonnull)styleSheet SWIFT_WARN_UNUSED_RESULT;
+ (void)setStyleSheet:(id <AndesStyleSheet> _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum AndesTagSize : NSInteger;
enum AndesTagState : NSInteger;
enum AndesTagChoiceType : NSInteger;
@protocol AndesTagLeftContent;

SWIFT_CLASS("_TtC7AndesUI14AndesTagChoice")
@interface AndesTagChoice : UIView
/// Text shown by the Simple Tag
@property (nonatomic, copy) NSString * _Nullable text;
/// Size for the Simple Tag
@property (nonatomic) enum AndesTagSize size;
/// State indicates different color styles for different semantic pruposes
@property (nonatomic) enum AndesTagState state;
/// Type indicates different tags type for different semantic pruposes
@property (nonatomic) enum AndesTagChoiceType type;
/// Set the Simple Tag left content. Available only for large size.
@property (nonatomic, strong) id <AndesTagLeftContent> _Nullable leftContent;
/// Set if the view has to animate when tag was selected. Default value <code>true</code>
@property (nonatomic) BOOL shouldAnimateTag;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text size:(enum AndesTagSize)size type:(enum AndesTagChoiceType)type state:(enum AndesTagState)state OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text size:(enum AndesTagSize)size type:(enum AndesTagChoiceType)type state:(enum AndesTagState)state leftContent:(id <AndesTagLeftContent> _Nullable)leftContent OBJC_DESIGNATED_INITIALIZER;
/// Set callback to be invoked when tag is pressed
- (void)shouldSelectTagWithCallback:(BOOL (^ _Nonnull)(void))callback;
@end


typedef SWIFT_ENUM(NSInteger, AndesTagChoiceType, open) {
  AndesTagChoiceTypeSimple = 0,
  AndesTagChoiceTypeDropdown = 1,
};


SWIFT_PROTOCOL("_TtP7AndesUI19AndesTagLeftContent_")
@protocol AndesTagLeftContent
@end


SWIFT_CLASS("_TtC7AndesUI22AndesTagLeftContentDot")
@interface AndesTagLeftContentDot : NSObject <AndesTagLeftContent>
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor text:(NSString * _Nonnull)text textColor:(UIColor * _Nonnull)textColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AndesUI23AndesTagLeftContentIcon")
@interface AndesTagLeftContentIcon : NSObject <AndesTagLeftContent>
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor icon:(UIImage * _Nonnull)icon iconColor:(UIColor * _Nonnull)iconColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor andesIconName:(NSString * _Nonnull)andesIconName iconColor:(UIColor * _Nonnull)iconColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AndesUI24AndesTagLeftContentImage")
@interface AndesTagLeftContentImage : NSObject <AndesTagLeftContent>
- (nonnull instancetype)initWithAvatar:(UIImage * _Nonnull)avatar OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum AndesTagType : NSInteger;

SWIFT_CLASS("_TtC7AndesUI14AndesTagSimple")
@interface AndesTagSimple : UIView
/// Text shown by the Simple Tag
@property (nonatomic, copy) NSString * _Nullable text;
/// Size for the Simple Tag
@property (nonatomic) enum AndesTagSize size;
/// Type indicates different color styles for different semantic pruposes
@property (nonatomic) enum AndesTagType type;
/// Set the Simple Tag left content. Available only for large size.
@property (nonatomic, strong) id <AndesTagLeftContent> _Nullable leftContent;
/// If the tag is dismissible, a close button is shown in the right side
@property (nonatomic) BOOL isDismissible;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text size:(enum AndesTagSize)size type:(enum AndesTagType)type isDismissible:(BOOL)isDismissible OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text size:(enum AndesTagSize)size type:(enum AndesTagType)type isDismissible:(BOOL)isDismissible leftContent:(id <AndesTagLeftContent> _Nullable)leftContent OBJC_DESIGNATED_INITIALIZER;
/// Set dismiss callback to be invoked when dismiss button is pressed
- (void)setDidDismissWithCallback:(void (^ _Nonnull)(AndesTagSimple * _Nonnull))callback;
@end


typedef SWIFT_ENUM(NSInteger, AndesTagSize, open) {
  AndesTagSizeSmall = 0,
  AndesTagSizeLarge = 1,
};

typedef SWIFT_ENUM(NSInteger, AndesTagState, open) {
  AndesTagStateIdle = 0,
  AndesTagStateSelected = 1,
};

typedef SWIFT_ENUM(NSInteger, AndesTagType, open) {
  AndesTagTypeNeutral = 0,
  AndesTagTypeHighlight = 1,
  AndesTagTypeSuccess = 2,
  AndesTagTypeWarning = 3,
  AndesTagTypeError = 4,
};

enum AndesTextInputState : NSInteger;
enum AndesTextInputTraits : NSInteger;
@protocol AndesTextAreaDelegate;
@protocol UITextInputTraits;

SWIFT_CLASS("_TtC7AndesUI13AndesTextArea")
@interface AndesTextArea : UIView
/// The state of an AndesTextfield defines its behaviours an colours.
@property (nonatomic) enum AndesTextInputState state;
/// Text for the label of the textfield
@property (nonatomic, copy) IBInspectable NSString * _Nullable label;
/// Sets the helper label text
@property (nonatomic, copy) IBInspectable NSString * _Nullable helper;
/// if 0, its unlimited, anything else its the limit of chars the user can input.
@property (nonatomic) IBInspectable uint16_t counter;
/// sets the placeholder label text.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
/// sets the placeholder label text.
@property (nonatomic) IBInspectable uint16_t maxLines;
/// Use the predefined text input traits, if you need more customization, use setCustomInputTraits
@property (nonatomic) enum AndesTextInputTraits textInputTraits;
/// returns the current text
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
@property (nonatomic, weak) id <AndesTextAreaDelegate> _Nullable delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithState:(enum AndesTextInputState)state label:(NSString * _Nullable)label helper:(NSString * _Nullable)helper counter:(uint16_t)counter placeholder:(NSString * _Nullable)placeholder maxLines:(uint16_t)maxLines OBJC_DESIGNATED_INITIALIZER;
- (void)setCustomInputTraits:(id <UITextInputTraits> _Nonnull)traits;
@end


@interface AndesTextArea (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibState SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'state' instead.");
@end



@interface AndesTextArea (SWIFT_EXTENSION(AndesUI))
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isFirstResponder;
@property (nonatomic, strong) UIView * _Nullable inputView;
@property (nonatomic, strong) UIView * _Nullable inputAccessoryView;
@end

@class UITextRange;

SWIFT_PROTOCOL("_TtP7AndesUI21AndesTextAreaDelegate_")
@protocol AndesTextAreaDelegate
@optional
- (BOOL)andesTextAreaShouldBeginEditing:(AndesTextArea * _Nonnull)textArea SWIFT_WARN_UNUSED_RESULT;
- (BOOL)andesTextAreaShouldEndEditing:(AndesTextArea * _Nonnull)textArea SWIFT_WARN_UNUSED_RESULT;
- (void)andesTextAreaDidBeginEditing:(AndesTextArea * _Nonnull)textArea;
- (void)andesTextAreaDidEndEditing:(AndesTextArea * _Nonnull)textArea;
- (BOOL)andesTextArea:(AndesTextArea * _Nonnull)textArea shouldChangeCharactersIn:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (void)andesTextAreaDidChangeSelection:(AndesTextArea * _Nonnull)textArea selectedRange:(UITextRange * _Nullable)range;
- (void)andesTextAreaDidChange:(AndesTextArea * _Nonnull)textArea;
@end

@protocol AndesTextFieldLeftComponent;
@protocol AndesTextFieldRightComponent;
@protocol AndesTextFieldDelegate;

SWIFT_CLASS("_TtC7AndesUI14AndesTextField")
@interface AndesTextField : UIView
/// The state of an AndesTextfield defines its behaviours an colours.
@property (nonatomic) enum AndesTextInputState state;
/// Text for the label of the textfield
@property (nonatomic, copy) IBInspectable NSString * _Nullable label;
/// Sets the helper label text
@property (nonatomic, copy) IBInspectable NSString * _Nullable helper;
/// if 0, its unlimited, anything else its the limit of chars the user can input.
@property (nonatomic) IBInspectable uint16_t counter;
/// sets the placeholder label text.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
/// sets the left component, only supperted for simple TextField
@property (nonatomic, strong) id <AndesTextFieldLeftComponent> _Nullable leftContent;
/// sets the right component, only supperted for simple TextField
@property (nonatomic, strong) id <AndesTextFieldRightComponent> _Nullable rightContent;
/// Use the predefined text input traits, if you need more customization, use setCustomInputTraits
@property (nonatomic) enum AndesTextInputTraits textInputTraits;
/// returns the current text
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
@property (nonatomic, weak) id <AndesTextFieldDelegate> _Nullable delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithState:(enum AndesTextInputState)state label:(NSString * _Nullable)label helper:(NSString * _Nullable)helper counter:(uint16_t)counter placeholder:(NSString * _Nullable)placeholder OBJC_DESIGNATED_INITIALIZER;
- (void)setCustomInputTraits:(id <UITextInputTraits> _Nonnull)traits;
@end


@interface AndesTextField (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibState SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'state' instead.");
@end


@interface AndesTextField (SWIFT_EXTENSION(AndesUI))
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
@property (nonatomic, readonly) BOOL isFirstResponder;
@property (nonatomic, strong) UIView * _Nullable inputView;
@property (nonatomic, strong) UIView * _Nullable inputAccessoryView;
@end


enum AndesTextFieldCodeStyle : NSInteger;
enum AndesTextFieldCodeState : NSInteger;
@protocol AndesTextFieldCodeDelegate;

SWIFT_CLASS("_TtC7AndesUI18AndesTextFieldCode")
@interface AndesTextFieldCode : UIView
/// Text for the label of the AndesTextFieldCode.
@property (nonatomic, copy) IBInspectable NSString * _Nullable label;
/// Text for the helpLabel of the AndesTextFieldCode.
@property (nonatomic, copy) IBInspectable NSString * _Nullable helpLabel;
/// The style of an AndesTextFieldCode defines the amount of input boxes and how they are grouped.
@property (nonatomic) enum AndesTextFieldCodeStyle style;
/// The state of an AndesTextFieldCode defines its behaviours and colours.
@property (nonatomic) enum AndesTextFieldCodeState state;
/// The text of an AndesTextFieldCode defines the whole text entered taken from all input boxes.
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
@property (nonatomic, weak) id <AndesTextFieldCodeDelegate> _Nullable delegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLabel:(NSString * _Nullable)label helpLabel:(NSString * _Nullable)helpLabel style:(enum AndesTextFieldCodeStyle)style state:(enum AndesTextFieldCodeState)state OBJC_DESIGNATED_INITIALIZER;
@end


@interface AndesTextFieldCode (SWIFT_EXTENSION(AndesUI))
/// Set focus on the component.
- (void)setFocus;
/// Remove focus from the component.
- (void)removeFocus;
@end


SWIFT_PROTOCOL("_TtP7AndesUI26AndesTextFieldCodeDelegate_")
@protocol AndesTextFieldCodeDelegate <NSObject>
@optional
- (void)textDidChange:(NSString * _Nonnull)text;
- (void)textDidComplete:(BOOL)isComplete;
@end


@interface AndesTextFieldCode (SWIFT_EXTENSION(AndesUI)) <AndesTextFieldCodeDelegate>
- (void)textDidChange:(NSString * _Nonnull)text;
- (void)textDidComplete:(BOOL)isComplete;
@end


@interface AndesTextFieldCode (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibState SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'state' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibStyle SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'style' instead.");
@end



typedef SWIFT_ENUM(NSInteger, AndesTextFieldCodeState, open) {
  AndesTextFieldCodeStateIDLE = 0,
  AndesTextFieldCodeStateERROR = 1,
  AndesTextFieldCodeStateDISABLED = 2,
};

typedef SWIFT_ENUM(NSInteger, AndesTextFieldCodeStyle, open) {
  AndesTextFieldCodeStyleTHREESOME = 0,
  AndesTextFieldCodeStyleFOURSOME = 1,
  AndesTextFieldCodeStyleTHREE_BY_THREE = 2,
};

enum AndesTextFieldComponentVisibility : NSInteger;

/// Component that can be placed on the right side of an AndesTextField
SWIFT_PROTOCOL("_TtP7AndesUI28AndesTextFieldRightComponent_")
@protocol AndesTextFieldRightComponent
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@end


SWIFT_CLASS("_TtC7AndesUI29AndesTextFieldComponentAction")
@interface AndesTextFieldComponentAction : NSObject <AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)init:(NSString * _Nonnull)actionLabel OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AndesUI28AndesTextFieldComponentCheck")
@interface AndesTextFieldComponentCheck : NSObject <AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AndesUI28AndesTextFieldComponentClear")
@interface AndesTextFieldComponentClear : NSObject <AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Component that can be placed on the left side of an AndesTextField
SWIFT_PROTOCOL("_TtP7AndesUI27AndesTextFieldLeftComponent_")
@protocol AndesTextFieldLeftComponent
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@end


SWIFT_CLASS("_TtC7AndesUI27AndesTextFieldComponentIcon")
@interface AndesTextFieldComponentIcon : NSObject <AndesTextFieldLeftComponent, AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@property (nonatomic, readonly, strong) UIImage * _Nonnull icon;
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
- (nonnull instancetype)initWithAndesIconName:(NSString * _Nonnull)andesIconName tintColor:(UIColor * _Nonnull)tintColor;
- (nonnull instancetype)initWithIcon:(UIImage * _Nonnull)icon tintColor:(UIColor * _Nonnull)tintColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AndesUI28AndesTextFieldComponentLabel")
@interface AndesTextFieldComponentLabel : NSObject <AndesTextFieldLeftComponent, AndesTextFieldRightComponent>
@property (nonatomic, readonly) enum AndesTextFieldComponentVisibility visibility;
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AndesTextFieldComponentVisibility, open) {
  AndesTextFieldComponentVisibilityAlways = 0,
  AndesTextFieldComponentVisibilityWhenNotEmpty = 1,
};


/// Delegation of AndesTextField behaviour
SWIFT_PROTOCOL("_TtP7AndesUI22AndesTextFieldDelegate_")
@protocol AndesTextFieldDelegate
@optional
/// Called directly from UITextField ShouldBeginEditing
/// \param textField the textfield that’s triggering the event
///
- (BOOL)andesTextFieldShouldBeginEditing:(AndesTextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Called directly from UITextField ShouldEndEditing
/// \param textField the textfield that’s triggering the event
///
- (BOOL)andesTextFieldShouldEndEditing:(AndesTextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Called directly from UITextField didBeginEditing
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidBeginEditing:(AndesTextField * _Nonnull)textField;
/// Called directly from UITextField DidEndEditing
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidEndEditing:(AndesTextField * _Nonnull)textField;
/// Called directly from UITextField shouldChangeCharactersIn
/// \param textField the textfield that’s triggering the event
///
- (BOOL)andesTextField:(AndesTextField * _Nonnull)textField shouldChangeCharactersIn:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Called directly from UITextField didChangeSelection
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidChangeSelection:(AndesTextField * _Nonnull)textField selectedRange:(UITextRange * _Nullable)range SWIFT_AVAILABILITY(ios,introduced=13);
/// Called directly from UITextField didChange action
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidChange:(AndesTextField * _Nonnull)textField;
/// Called on action button touched up
/// \param textField the textfield that’s triggering the event
///
- (void)andesTextFieldDidTapRightAction:(AndesTextField * _Nonnull)textField;
/// Asks the delegate if the text field should process the pressing of the return button.
/// \param textField the textfield that’s triggering the event
///
- (BOOL)andesTextFieldShouldReturn:(AndesTextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// Asks the delegate if the deleteBackward key was pressed.
/// \param textField the textfield that’s triggering the event
///
/// \param wasEmpty notifies if the textField text was empty before deleteBackward key was pressed.
///
- (void)andesTextField:(AndesTextField * _Nonnull)textField didDeleteBackwardAnd:(BOOL)wasEmpty;
@end



/// Used to define the colors of an AndesTextField
typedef SWIFT_ENUM(NSInteger, AndesTextInputState, open) {
  AndesTextInputStateIdle = 0,
  AndesTextInputStateError = 1,
  AndesTextInputStateDisabled = 2,
  AndesTextInputStateReadOnly = 3,
};

typedef SWIFT_ENUM(NSInteger, AndesTextInputTraits, open) {
  AndesTextInputTraitsPassword = 0,
  AndesTextInputTraitsEmail = 1,
  AndesTextInputTraitsNumberPad = 2,
  AndesTextInputTraitsCustom = 3,
};

enum AndesThumbnailHierarchy : NSInteger;
enum AndesThumbnailType : NSInteger;
enum AndesThumbnailSize : NSInteger;
enum AndesThumbnailState : NSInteger;

SWIFT_CLASS("_TtC7AndesUI14AndesThumbnail")
@interface AndesThumbnail : UIView
@property (nonatomic) enum AndesThumbnailHierarchy hierarchy;
@property (nonatomic) enum AndesThumbnailType type;
@property (nonatomic) enum AndesThumbnailSize size;
@property (nonatomic) enum AndesThumbnailState state;
@property (nonatomic, strong) IBInspectable UIImage * _Null_unspecified image;
@property (nonatomic, strong) IBInspectable UIColor * _Nullable accentColor;
/// Constructor for Thumbnail when it is used programmatically where
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     hierarchy
///   </li>
///   <li>
///     style is the type of thumbnail you want to draw
///   </li>
///   <li>
///     size is the especification for the Thumbnail dimensions
///   </li>
///   <li>
///     state
///   </li>
///   <li>
///     image
///   </li>
///   <li>
///     accentColor
///   </li>
/// </ul>
- (nonnull instancetype)initWithHierarchy:(enum AndesThumbnailHierarchy)hierarchy type:(enum AndesThumbnailType)type size:(enum AndesThumbnailSize)size state:(enum AndesThumbnailState)state image:(UIImage * _Nonnull)image accentColor:(UIColor * _Nullable)accentColor OBJC_DESIGNATED_INITIALIZER;
/// Constructor for the thumbnail when it is used by interface builder
/// By defect, it will be .icon and .default
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface AndesThumbnail (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibType SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'type' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibSize SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'size' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibHierarchy SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'hierarchy' instead.");
@property (nonatomic, copy) IBInspectable NSString * _Nonnull ibState SWIFT_UNAVAILABLE_MSG("This property is reserved for Interface Builder. Use 'state' instead.");
@end

/// The AndesThumbnailHierarchy contains the differents hierarchies that a thumbnail supports
typedef SWIFT_ENUM(NSInteger, AndesThumbnailHierarchy, open) {
  AndesThumbnailHierarchyDefaultHierarchy = 0,
  AndesThumbnailHierarchyLoud = 1,
  AndesThumbnailHierarchyQuiet = 2,
};

/// The AndesThumbnailSize contains the differents sizes that a Thumbnail supports
typedef SWIFT_ENUM(NSInteger, AndesThumbnailSize, open) {
  AndesThumbnailSizeSize24 = 0,
  AndesThumbnailSizeSize32 = 1,
  AndesThumbnailSizeSize40 = 2,
  AndesThumbnailSizeSize48 = 3,
  AndesThumbnailSizeSize56 = 4,
  AndesThumbnailSizeSize64 = 5,
  AndesThumbnailSizeSize72 = 6,
  AndesThumbnailSizeSize80 = 7,
};

/// The AndesThumbnailState contains the differents states that a thumbnail supports
typedef SWIFT_ENUM(NSInteger, AndesThumbnailState, open) {
  AndesThumbnailStateEnabled = 0,
  AndesThumbnailStateDisabled = 1,
};

/// The AndesThumbnailType contains the differents types that a thumbnail supports
typedef SWIFT_ENUM(NSInteger, AndesThumbnailType, open) {
  AndesThumbnailTypeIcon = 0,
  AndesThumbnailTypeImageCircle = 1,
  AndesThumbnailTypeImageSquare = 2,
};



@interface UIColor (SWIFT_EXTENSION(AndesUI))
@end


/// Andes Color Palette
SWIFT_CLASS_NAMED("Andes")
@interface AndesColors : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull white;)
+ (UIColor * _Nonnull)white SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray040;)
+ (UIColor * _Nonnull)gray040 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray070;)
+ (UIColor * _Nonnull)gray070 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray100;)
+ (UIColor * _Nonnull)gray100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray250;)
+ (UIColor * _Nonnull)gray250 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray450;)
+ (UIColor * _Nonnull)gray450 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray800;)
+ (UIColor * _Nonnull)gray800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid040;)
+ (UIColor * _Nonnull)graySolid040 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid070;)
+ (UIColor * _Nonnull)graySolid070 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid100;)
+ (UIColor * _Nonnull)graySolid100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid250;)
+ (UIColor * _Nonnull)graySolid250 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid450;)
+ (UIColor * _Nonnull)graySolid450 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull graySolid800;)
+ (UIColor * _Nonnull)graySolid800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull yellowML500;)
+ (UIColor * _Nonnull)yellowML500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML100;)
+ (UIColor * _Nonnull)blueML100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML150;)
+ (UIColor * _Nonnull)blueML150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML200;)
+ (UIColor * _Nonnull)blueML200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML300;)
+ (UIColor * _Nonnull)blueML300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML400;)
+ (UIColor * _Nonnull)blueML400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML500;)
+ (UIColor * _Nonnull)blueML500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML600;)
+ (UIColor * _Nonnull)blueML600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML700;)
+ (UIColor * _Nonnull)blueML700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueML800;)
+ (UIColor * _Nonnull)blueML800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP100;)
+ (UIColor * _Nonnull)blueMP100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP150;)
+ (UIColor * _Nonnull)blueMP150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP200;)
+ (UIColor * _Nonnull)blueMP200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP300;)
+ (UIColor * _Nonnull)blueMP300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP400;)
+ (UIColor * _Nonnull)blueMP400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP500;)
+ (UIColor * _Nonnull)blueMP500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP600;)
+ (UIColor * _Nonnull)blueMP600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP700;)
+ (UIColor * _Nonnull)blueMP700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull blueMP800;)
+ (UIColor * _Nonnull)blueMP800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green100;)
+ (UIColor * _Nonnull)green100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green150;)
+ (UIColor * _Nonnull)green150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green200;)
+ (UIColor * _Nonnull)green200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green300;)
+ (UIColor * _Nonnull)green300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green400;)
+ (UIColor * _Nonnull)green400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green500;)
+ (UIColor * _Nonnull)green500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green600;)
+ (UIColor * _Nonnull)green600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green700;)
+ (UIColor * _Nonnull)green700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull green800;)
+ (UIColor * _Nonnull)green800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange100;)
+ (UIColor * _Nonnull)orange100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange150;)
+ (UIColor * _Nonnull)orange150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange200;)
+ (UIColor * _Nonnull)orange200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange300;)
+ (UIColor * _Nonnull)orange300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange400;)
+ (UIColor * _Nonnull)orange400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange500;)
+ (UIColor * _Nonnull)orange500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange600;)
+ (UIColor * _Nonnull)orange600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange700;)
+ (UIColor * _Nonnull)orange700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull orange800;)
+ (UIColor * _Nonnull)orange800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red100;)
+ (UIColor * _Nonnull)red100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red150;)
+ (UIColor * _Nonnull)red150 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red200;)
+ (UIColor * _Nonnull)red200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red300;)
+ (UIColor * _Nonnull)red300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red400;)
+ (UIColor * _Nonnull)red400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red500;)
+ (UIColor * _Nonnull)red500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red600;)
+ (UIColor * _Nonnull)red600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red700;)
+ (UIColor * _Nonnull)red700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull red800;)
+ (UIColor * _Nonnull)red800 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface UILabel (SWIFT_EXTENSION(AndesUI))
- (void)setAndesStyleWithStyle:(AndesFontStyle * _Nonnull)style;
@end



@interface UITextView (SWIFT_EXTENSION(AndesUI))
- (void)setAndesStyleWithStyle:(AndesFontStyle * _Nonnull)style;
@end



@interface UIViewController (SWIFT_EXTENSION(AndesUI))
@property (nonatomic, readonly, strong) AndesBottomSheetViewController * _Nullable sheetViewController;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
